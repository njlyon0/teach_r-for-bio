{
  "hash": "6519c4d90b381259c91079b0649b79ee",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Intro to Data Science\"\nauthor: \"Lab 6 -- Visualization II\"\nengine: knitr\nformat: \n  revealjs: \n    slide-number: c\n    scrollable: false\n    code-overflow: wrap\n    code-line-numbers: false\n    code-copy: hover\n    theme: [night, slides.scss]\n    reference-location: document\n    footer: \"[Programming in R for Biologists](https://njlyon0.github.io/teach_r-for-biologists/)\"\n---\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\n## A Guide to Your Process\n\n### [Scheduling]{.blue}\n\n### [Learning Objectives]{.purple}\n\n### [Practice]{.pink}\n\n### [Supporting Information]{.orange}\n\n### [Class Discussion]{.gold}\n\n## [Today's Plan]{.blue}\n\n- Muddiest Point Review\n- Data Visualization with `ggplot2`\n    - Editing `theme` elements\n- Multi-Panel Graphs\n- GitHub Presence Check-Ins (1-on-1)\n    - <u>_Not_</u> graded! Don't stress!\n\n## [Today's Learning Objectives]{.purple}\n\nAfter today's session you will be able to:\n\n. . .\n\n- Modify background elements in a `ggplot2` graph\n- Create publication-quality figures with `ggplot2`\n- Explain the difference between plot faceting and plot grids\n\n## [Muddiest Point Review]{.gold}\n\n- Recurring topics from most recent MPs:\n\n\\\n\n. . .\n\n- What other topic(s) would you like to review?\n\n## [`ggplot2` Review]{.orange} {.smaller}\n\n- ggplots require: (1) data, (2) aesthetics, (3) geometries\n    - Optionally can mess with `theme` parameters\n\n. . .\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](slides_6b_files/figure-revealjs/ex-graph-v7-1.png){fig-align='center' width=576}\n:::\n:::\n\n\n## [Theme Internal Structure]{.orange} {.smaller}\n\n- Theme is composed of [elements]{.purple}\n\n\\\n\n- Elements can be modified as desired inside of `theme` function\n\n\\\n\n- Each type of element has a different 'helper function' needed to modify that element\n    - Change text = use `element_text`\n    - Change line = use `element_line`\n    - _Remove_ an element with `element_blank`\n\n## [Theme Syntax]{.orange} {.smaller}\n\n- You use the `theme` function _once_ with as many `element_...` functions as you need\n\n\\\n\n- Here's an example of the proper syntax\n```{.r}\n# Make a simple scatterplot\nggplot(data = my_df, mapping = aes(x = x_var, y = y_var)) +\n    geom_point() +\n    # Modify its theme to make the axis font size bigger\n    theme(axis.text = element_text(size = 20),\n          # Also remove the grid lines\n          panel.grid = element_blank())\n```\n\n\\\n\n. . . \n\n- Note how the `theme` and `element_...` functions are used together\n\n## [Gridline Theme Components]{.orange} {.smaller}\n\n- You'll learn theme element names as you work more with `ggplot2`\n\n\\\n\n. . . \n\n- Here are a few broadly relevant ones:\n    - Gridlines = `panel.grid`\n    - Plot background = `panel.background`\n    - Axis lines (X & Y) = `axis.line`\n\n## [Get Ready]{.pink} {.smaller}\n\n![](images/hex-ggplot2.png){.absolute top=0 left=1100 width=\"12%\" fig-alt=\"hex logo for ggplot2 R package\"}\n\n1. Create a script for this week\n\n\\\n\n2. Load `ggplot2`\n\n\\\n\n3. Read \"minnow.csv\" into R and check the structure!\n\n\\\n\n4. Copy the _final_ graph we made last time\n\n\\\n\n5. Assign the graph to an object\n\n## [Remove Gridlines]{.pink} {.smaller}\n\n![](images/hex-ggplot2.png){.absolute top=0 left=1100 width=\"12%\" fig-alt=\"hex logo for ggplot2 R package\"}\n\n- To that graph, add the following code:\n    - `theme(panel.grid = element_blank())`\n\n\\\n\n- What does this do to your graph?\n\n\\\n\n- What happens if you add these two lines as well (**inside** of the `theme` parentheses!)?\n    - `panel.background = element_blank()`\n    - `axis.line = element_line(color = \"black\"))`\n\n## [Remove Gridlines]{.pink} {.smaller}\n\n![](images/hex-ggplot2.png){.absolute top=0 left=1100 width=\"12%\" fig-alt=\"hex logo for ggplot2 R package\"}\n\n::::{.columns}\n:::{.column width=\"50%\"}\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](slides_6b_files/figure-revealjs/ex-graph-v8a-1.png){width=960}\n:::\n:::\n\n\n:::\n:::{.column width=\"50%\"}\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](slides_6b_files/figure-revealjs/ex-graph-v8b-1.png){width=960}\n:::\n:::\n\n\n:::\n::::\n\n## [Changing Text Size]{.orange} {.smaller}\n\n- We can also modify text size inside of `theme`\n\n\\\n\n. . . \n\n- Axis \"[title]{.purple}\" vs. axis \"[text]{.gold}\"\n    - `axis.title` = axis label text (given to `labs` function)\n    - `axis.text` = text on axis tick marks\n\n\\\n\n. . . \n\n![](images/graph-title-v-text.png){.absolute top=80 left=750 width=\"40%\" fig-alt=\"Screen capture of the x-axis of a ggplot2-style graph with the axis label (i.e., the bigger text -- a.k.a. 'title') in a rectangle and the axis tick labels (i.e., the smaller text -- a.k.a. 'text') in a separate rectangle\"}\n\n. . . \n\n- Want to modify just X or Y? Add that to the element name!\n    - E.g., `theme(axis.text.x = element_text(...))`\n\n\\\n\n. . . \n\nIncrease font size with: `element_text(size = 14)`\n\n## [Change Text Size]{.pink} {.smaller}\n\n![](images/hex-ggplot2.png){.absolute top=0 left=1100 width=\"12%\" fig-alt=\"hex logo for ggplot2 R package\"}\n\n- Take your most recent graph\n    - No gridlines, no background gray square, black axis lines\n\n\\\n\n. . .\n\n- And make the following tweaks:\n    - Make the axis _title_ font size 15\n    - Make the axis _text_ font size 13\n\n\\\n\n. . .\n\n- What does that leave you with?\n\n## [Change Text Size]{.pink} {.smaller}\n\n![](images/hex-ggplot2.png){.absolute top=0 left=1100 width=\"12%\" fig-alt=\"hex logo for ggplot2 R package\"}\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](slides_6b_files/figure-revealjs/ex-graph-v9-1.png){fig-align='center' width=576}\n:::\n:::\n\n\n## [Customizing Legend]{.orange} {.smaller}\n\n- You can also customize the plot legend in the `theme` function!\n    - Legend placement = `legend.position`\n    - Legend title = `legend.title`\n\n\\\n\n. . .\n\n- `legend.position` works differently than most other elements!\n    - Instead of wanting `element_...` it wants `c(<x position>, <y position>)`\n    - Positions range from 0 (left / bottom) to 1 (right / top)\n\n## [Customizing Legend Syntax]{.orange} {.smaller}\n\n- Check out an example where we put the legend in the middle of the plot\n```{.r}\n# Example scatterplot\nggplot(data = my_df, mapping = aes(x = x_var, y = y_var)) +\n    geom_point() +\n    # With legend in the middle of the space\n    theme(legend.position = c(0.5, 0.5))\n```\n\n\\\n\n. . .\n\n- That graph would have the legend in both:\n    - the center (left / right)\n    - the middle (top / bottom)\n\n## [Customize Legend]{.pink} {.smaller}\n\n![](images/hex-ggplot2.png){.absolute top=0 left=1100 width=\"12%\" fig-alt=\"hex logo for ggplot2 R package\"}\n\n- To the graph you created last practice:\n    - Remove the legend title\n    - Experiment with legend placement until youâ€™re happy\n\n\\\n\n- You may put the legend wherever you'd like _but_:\n    - It <u>should not</u> overlap any points / boxplots\n\n\\\n\n- What does _that_ graph look like?\n\n## [Customize Legend]{.pink} {.smaller}\n\n![](images/hex-ggplot2.png){.absolute top=0 left=1100 width=\"12%\" fig-alt=\"hex logo for ggplot2 R package\"}\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](slides_6b_files/figure-revealjs/ex-graph-v10-1.png){fig-align='center' width=576}\n:::\n:::\n\n\n## [Temperature Check]{.purple}\n\n#### How are you Feeling?\n\n<p align=\"center\">\n<img src=\"comics/debugging.png\" alt=\"Comic-style graph depicting someone's emotional state as they debug code (from initial struggle and defeat to eventual triumph)\">\n</p>\n\n## [Multi-Panel Background]{.orange} {.smaller}\n\n::::{.columns}\n:::{.column width=\"65%\"}\n- Sometimes nice to have multiple graphs next to each other\n    - Makes direct comparison easier\n    - Journals have limits on number of figures but multi-panels still count as 1\n\n\\\n\n- Two methods (for ggplots):\n    1. `ggplot2::facet_...`\n    2. `cowplot::plot_grid()`\n\n:::\n:::{.column width=\"35%\"}\n\n<img src=\"images/graph-multi-panel.jpg\" alt=\"Three panels of maps of the continental US where each panel shows conditions under a different climate change future\" align=\"right\">\n\n:::\n::::\n\n## [Facted Graphs]{.orange} {.smaller}\n\n- `ggplot2` has an internal way of handling this called [facets]{.purple}\n\n\\\n\n- Facets work just like geometries\n    - You get separate plots for each level of the facet variable\n\n\\\n\n- Facets must _all_ be the same plot type and _have identical axes_\n    - Sometimes not an issue but good to keep in mind!\n\n## [Fact Syntax]{.orange} {.smaller}\n\n- To facet into 1 row x many columns:\n```{.r}\n# Example scatterplot\nggplot(data = my_df, mapping = aes(x = x_var, y = y_var)) +\n    geom_point() +\n    # Facet into rows of some other variable\n    facet_grid(. ~ facet_variable)\n```\n\n\\\n\n. . .\n\n- To facet into many rows x 1 column:\n```{.r}\n# Example scatterplot\nggplot(data = my_df, mapping = aes(x = x_var, y = y_var)) +\n    geom_point() +\n    # Facet into rows of some other variable\n    facet_grid(facet_variable ~ .)\n```\n\n## [Facet Example]{.orange} {.smaller}\n\n![](images/hex-penguins.png){.absolute top=0 left=1100 width=\"12%\" fig-alt=\"hex logo for palmerpenguins R package\"}\n![](images/hex-ggplot2.png){.absolute top=0 left=965 width=\"12%\" fig-alt=\"hex logo for ggplot2 R package\"}\n\n- `facet_grid(. ~ island)`\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](slides_6b_files/figure-revealjs/ex-facet-1.png){fig-align='center' width=576}\n:::\n:::\n\n\n## [Facet]{.pink} {.smaller}\n\n![](images/hex-ggplot2.png){.absolute top=0 left=1100 width=\"12%\" fig-alt=\"hex logo for ggplot2 R package\"}\n\n- Using the fish data, make a new graph that:\n    - Has nest _diameter_ on the X axis\n    - Has nest _depth_ on the Y axis\n    - Is a scatterplot\n    - Faceted by species\n    - Plus any additional `theme` tweaks you want to make!\n\n\\\n\n- What does your plot look like?\n\n## [Facet]{.pink} {.smaller}\n\n![](images/hex-ggplot2.png){.absolute top=0 left=1100 width=\"12%\" fig-alt=\"hex logo for ggplot2 R package\"}\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](slides_6b_files/figure-revealjs/ex-graph-v11-1.png){fig-align='center' width=576}\n:::\n:::\n\n\n## [Plot Grids]{.orange} {.smaller}\n\n- Facets work great when all panels are the same\n    - What about when you have several types of graph?\n\n\\\n\n. . . \n\n- `cowplot::plot_grid` lets you put multiple different graphs together\n\n\\\n\n. . . \n\n- Have to make graphs _separately_ first, _then_ combine them\n\n\\\n\n. . . \n\n- Example syntax: \n    - `cowplot::plot_grid(plot1, plot2, ncol = 1, nrow = 2)`\n    - A lot of other optional arguments\n\n## [Plot Grid Example]{.orange} {.smaller}\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](slides_6b_files/figure-revealjs/ex-multi-panel-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n## [Plot Grids]{.pink} {.smaller}\n\n![](images/hex-cowplot.png){.absolute top=0 left=1100 width=\"12%\" fig-alt=\"hex logo for cowplot R package\"}\n![](images/hex-ggplot2.png){.absolute top=0 left=965 width=\"12%\" fig-alt=\"hex logo for ggplot2 R package\"}\n\n- Make two graphs using the fish data:\n\n1. Copy your faceted graph of diameter vs. depth\n    - But remove the facet by species\n\n2. Make a boxplot with flow on the y-axis and species on the x-axis\n\n\\\n\n- Using `plot_grid`, make a multi-panel graph with these two graphs\n    - Make them side by side (I.e., 2 columns, 1 row)\n\n## [Plot Grids]{.pink} {.smaller}\n\n![](images/hex-cowplot.png){.absolute top=0 left=1100 width=\"12%\" fig-alt=\"hex logo for cowplot R package\"}\n![](images/hex-ggplot2.png){.absolute top=0 left=965 width=\"12%\" fig-alt=\"hex logo for ggplot2 R package\"}\n\n\\\n\\\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](slides_6b_files/figure-revealjs/ex-graph-v12-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n## [Temperature Check]{.purple}\n\n#### How are you Feeling?\n\n<p align=\"center\">\n<img src=\"comics/debugging.png\" alt=\"Comic-style graph depicting someone's emotional state as they debug code (from initial struggle and defeat to eventual triumph)\">\n</p>\n\n## [GitHub Presence FAQ]{.orange} {.smaller}\n\n- Worth 40 pts (16% course grade)\n\n\\\n\n- Checklist-style rubric on Canvas\n\n\\\n\n- Due [day before _last_ lab]{.blue}\n\n\\\n\n- Can basically finish all of it now though if you want!\n\n## [GitHub Presence Assignment]{.orange} {.smaller}\n\n- This assignment will seriously help in interviews / job apps!\n    - Shows how good of a data scientist you are\n\n\\\n\n. . .\n\n- I don't want anyone caught unawares by this assignment\n    - So I'll meet with each of you 1-on-1 today to see where you're at so far\n\n\\\n\n. . .\n\n- Good chance for you to ask any questions you have!\n    - Also lets me give you tips for success\n\n## [Upcoming Due Dates]{.blue} {.smaller}\n\n::::{.columns}\n:::{.column width=\"50%\"}\n\n### Due before lecture\n\n#### (By midnight)\n\n- Homework \\#6\n\n:::\n:::{.column width=\"50%\"}\n\n### Due before lab\n\n#### (By midnight)\n\n- Muddiest Point \\#7\n- Submit [Draft 2]{.pink} of Function Tutorials\n    - Double check rubric to see that you're not leaving any points on the table!\n    - Remember to also <u>submit the Revision Response</u>\n\n:::\n::::\n\n## [GitHub 1-on-1s]{.gold} {.smaller}\n\n- Stick around until we do our 1-on-1\n\n\\\n\n- After you have met with me you can leave\n    - Though you're welcome to stay and work on Homework \\#6 / course assignments!\n\n\\\n\n- Any volunteers to go first?\n",
    "supporting": [
      "slides_6b_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}