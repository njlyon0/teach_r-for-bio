{
  "hash": "1dc037d264e6dda2c736facc45862574",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Intro to Data Science\"\nauthor: \"Lab 3 -- Data Wrangling (P2)\"\nengine: knitr\nformat: \n  revealjs: \n    slide-number: c\n    scrollable: false\n    code-overflow: wrap\n    code-line-numbers: false\n    code-copy: hover\n    theme: [night, slides.scss]\n    reference-location: document\n    footer: \"[Programming in R for Biologists](https://njlyon0.github.io/teach_r-for-biologists/)\"\n---\n\n\n## A Guide to Your Process\n\n### [Scheduling]{.blue}\n\n### [Learning Objectives]{.purple}\n\n### [Practice]{.pink}\n\n### [Supporting Information]{.orange}\n\n### [Class Discussion]{.gold}\n\n## [Today's Plan]{.blue}\n\n- Muddiest Point Review\n- Intro to the Pipe\n- Groupwise Summarization with `dplyr`\n- Reshaping Data with `tidyr`\n- Discuss Function Tutorial Assignment\n\n## [Today's Learning Objectives]{.purple}\n\nAfter today's session you will be able to:\n\n. . .\n\n- Use the pipe operator in your code\n- Perform group summarization with `dplyr` functions\n- Reshape data from long to wide format\n    - And vice versa\n\n## [Muddiest Point Review]{.gold}\n\n- Recurring topics from most recent MPs:\n\n\\\n\n. . .\n\n- What other topic(s) would you like to review?\n\n## [Pipe Operator (`%>%`)]{.orange}\n\n- Allows chaining together multiple operations\n\n\\\n\n- Product of each function passed to next function\n```{.r}\nnew_data <- old_data %>%\n\t\t\tfunction() %>%\n\t\t\tanother_fxn() %>%\n\t\t\tetc()\n```\n\n\\\n\n- Same workflow requires fewer objects\n\n## [Pipe Operator Example]{.orange} {.smaller}\n\n### Without Pipe\n\n```{.r}\n# Load data\ndf_v1 <- read.csv(\"butterfly.csv\")\n\n# Subset to only one treatment\ndf_v2 <- filter(df_v1, treatment == \"cows\")\n\n# Add together caterpillars and adult butterflies\ndf_v3 <- mutate(df_v2, monarch.tot = monarch.bfly + monarch.larva)\n\n# Keep only the total monarch column\ndf_v4 <- select(df_v3, monarch)\n```\n\n## [Pipe Operator Example]{.orange} {.smaller}\n\n### Without Pipe\n\n```{.r}\n# Load data\ndf_v1 <- read.csv(\"butterfly.csv\")\n\n# Subset to only one treatment\ndf_v2 <- filter(df_v1, treatment == \"cows\")\n\n# Add together caterpillars and adult butterflies\ndf_v3 <- mutate(df_v2, monarch.tot = monarch.bfly + monarch.larva)\n\n# Keep only the total monarch column\ndf_v4 <- select(df_v3, monarch)\n```\n\n### With Pipe\n\n```{.r}\n# Load data\ndf_v1 <- read.csv(\"butterfly.csv\")\n\n# Do all needed wrangling\ndf_done <- df_v1 %>%\n      # Subset to only one treatment\n      filter(treatment == \"cows\") %>%\n      # Add together caterpillars and adult butterflies\n      mutate(monarch.tot = monarch.bfly + monarch.larva) %>% \n      # Keep only the total monarch column\n      select(df_v3, monarch)\n```\n\n## [Why Named \"Pipe\"?]{.orange}\n\nRenÃ© Magritte -- _The Treachery of Images_ (1929)\n\n![](images/magritte-profile.jpg){.absolute top=150 left=50 width=\"30%\"}\n\n![](images/magritte-treachery.jpg){.absolute top=150 left=450 width=\"60%\"}\n![](images/hex-magrittr.png){.fragment .fade-in .absolute top=475 left=120 width=\"18%\"}\n\n## [Practice: Pipe]{.pink} {.smaller}\n\n![](images/hex-magrittr.png){.absolute top=0 left=1100 width=\"12%\"}\n\n1. Install and load the `magrittr` package\n\n\\\n\n2. Return to your 3-step wrangling of \"minnow.csv\" from [Lecture \\#3]{.gold}\n    - Filter \"minnow.csv\" to only Stonerollers and Chubs\n    - Convert depth & diameter to meters (from cm)\n    - Pare down columns to only species and depth/diameter in meters\n\n\\\n\n3. Copy these lines and edit them to use the `%>%`\n    - Does this have the same end result as the non-pipe lines?\n\n## [Groupwise Summarization]{.orange} {.smaller}\n\n- Summarizing within groups is a _common_ operation\n    - **Average** barnacle number at several tidal heights\n    - **Variation** in reported customer satisfaction within demographic groups\n\n\\\n\n. . . \n\n- `dplyr` offers three functions to accomplish this\n    1. `group_by`\n    2. `summarize`\n    3. `ungroup`\n\n## [Summarization Syntax]{.orange}\n\n- `group_by` has similar structure to `select`\n    - Wants column names separated by commas\n\n\\\n\n. . . \n\n- `summarize` has similar structure to `mutate`\n    - E.g., `new_column = function(old_column)`\n\n\\\n\n. . . \n\n- `ungroup` has _no_ arguments!\n\n## [Summarization + Pipes]{.orange}\n\nLet's check out an example:\n\n\\\n\n```{.r code-line-numbers=\"|4|6,7|9\"}\n# Take data\ndata %>%\n    # 1. Group by treatment\n    group_by(treatment) %>%\n    # 2. Calculate average and deviation\n    summarize(mean_val = mean(response),\n              sd_val = sd(response)) %>%\n    # 3. Ungroup\n    ungroup()\n```\n\n## [Summarization Warnings]{.orange} {.smaller}\n\n1. Summarizing simplifies dataframes!\n    - After summarizing, you'll have _one_ row per <u>combination</u> of grouping columns\n\n\\\n\n. . . \n\n2. Summarizing drops columns _unless_:\n    1. Column is named in `group_by`\n    2. Column is created by `summarize`\n\n\\\n\n- If you don't want to lose a column, it needs to meet one of those criteria\n\n## [Relevant Helper Functions]{.orange} {.smaller}\n\n- To summarize you'll need to use functions that calculate summary values\n\n\\\n\n. . . \n\n- Take an average with `mean`\n    - Has `na.rm` argument that determines whether missing values are included\n\n\\\n\n. . .\n\n- Find standard deviation with `sd`\n    - Common measurement to use as error bars in a graph\n\n\\\n\n. . .\n\n- Find the smallest or largest number with `min` and `max`\n\n## [Practice: Summarizing]{.orange} {.smaller}\n\n![](images/hex-magrittr.png){.absolute top=0 left=1100 width=\"12%\"}\n![](images/hex-tidyr.png){.absolute top=0 left=965 width=\"12%\"}\n![](images/hex-penguins.png){.absolute top=115 left=1032 width=\"12%\"}\n\n\n- Load the `palmerpenguins`, `tidyr`, and `magrittr` packages\n\n\\\n\n- Using the \"penguins\" data in the `palmerpenguins` package, answer the following questions:\n\n\\\n\n. . .\n\n1. What is the average bill length in millimeters for each species of penguin?\n\n. . .\n\n2. Which island has the smallest individual penguin?\n    - _Hint:_ use body mass\n\n. . . \n\n3. Which species <u>at which island</u> has the longest flippers for female penguins?\n    - Hint: remember you can use `filter` before or after `summarize`!\n\n## [Temperature Check]{.purple}\n\n#### How are you Feeling?\n\n<p align=\"center\">\n<img src=\"comics/debugging.png\" alt=\"Comic-style graph depicting someone's emotional state as they debug code (from initial struggle and defeat to eventual triumph)\">\n</p>\n\n## [Data \"Shape\"]{.orange} {.smaller}\n\n- Data with rows/columns has a [shape]{.purple}\n    - Shape refers to whether _observations_ are in the rows or the columns\n\n\\\n\n. . .\n\n- \"Wide\" data has observations as _columns_\n    - E.g., Each column is a different species' count\n\n\\\n\n. . .\n\n- \"Long\" data has observations as _rows_\n    - E.g., The columns are \"species\" and \"count\"\n\n## [Data Shape Visual]{.orange}\n\n\\\n\n::::{.columns}\n\n:::{.column width=\"60%\"}\n\n### Long Data\n\n:::\n\n:::{.column width=\"10%\"}\n\n:::\n\n:::{.column width=\"30%\"}\n\n### Wide Data\n\n:::\n\n::::\n\n![](images/shape-long.png){.fragment .fade-in .absolute top=200 left=-50 width=\"40%\"}\n\n![](images/shape-wide.png){.fragment .fade-in .absolute top=325 left=650 width=\"50%\"}\n\n![](images/shape-arrows.png){.fragment .fade-in .absolute top=325 left=400 width=\"20%\"}\n\n## [Reshaping Longer]{.orange} {.smaller}\n\n- Change _from_ wide _to_ long format with `tidyr::pivot_longer`\n    - Has 4 key arguments\n\n\\\n\n. . . \n\n1. `data` = the wide data to pivot\n\n\n\\\n\n. . .\n\n2. `cols` = the columns to pivot\n    - Can select which columns to pivot _OR_ which to **not**\n    - Include: `cols = colD:colX`\n    - Exclude: `cols = -colA:-colC`\n\n## [Reshaping Longer Continued]{.orange} {.smaller}\n\n3. `names_to` = name of new column to hold old column names\n    - Must be in quotes\n\n\\\n\n. . .\n\n4. `values_to` = name of new column to hold _values_\n    - Also in quotes\n\n\\\n\n. . .\n\n- Example (for syntax):\n```{.r}\npivot_longer(data = my_df,\n             columns = hydrogen:uranium,\n             names_to = \"element\",\n             values_to = \"measurement\")\n```\n\n## [Reshaping Longer Visual]{.orange}\n\n<p align=\"center\">\n<img src=\"images/graphic-pivot-longer.png\" width=\"120%\">\n</p>\n\n## [Practice: `pivot_longer`]{.pink} {.smaller}\n\n![](images/hex-tidyr.png){.absolute top=0 left=1100 width=\"12%\"}\n\n1. Download the \"bees.csv\" and load it into R with `read.csv`\n    - Check its structure! What columns are there?\n\n\\\n\n. . .\n\n2. Pivot the data so that you are left with three columns:\n    - \"year\", \"bee_group\", and \"bee_abundance\"\n\n\\\n\n. . . \n\n3. Check your work! What are the dimensions of the resulting dataframe?\n\n. . . \n\n- Should be 32 rows by 3 columns\n\n\n## [Reshaping Wider]{.orange} {.smaller}\n\n- Change _from_ long _to_ wide format with `tidyr::pivot_wider`\n    - Also has 4 key arguments\n\n\\\n\n. . . \n\n1. `data` = the wide data to pivot\n\n\n\\\n\n. . .\n\n2. `names_from` = name of the column to turn into new column names\n    - Must be <u>unquoted</u>\n\n## [Reshaping Wider Continued]{.orange} {.smaller}\n\n3. `values_from` = name of column to make into new column values\n    - Also <u>unquoted</u>\n\n\\\n\n. . .\n\n4. `values_fill` = value to fill if value is missing in original data\n    - Technically optional but good practice to include explicitly\n\n\\\n\n. . .\n\n- Example:\n```{.r}\npivot_wider(data = my_df,\n            names_from = \"fruit\",\n            values_from = \"size\",\n            values_fill = NA)\n```\n\n## [Reshaping Wider Visual]{.orange}\n\n<p align=\"center\">\n<img src=\"images/graphic-pivot-wider.png\" width=\"120%\">\n</p>\n\n## [Practice: `pivot_wider`]{.pink}\n\n![](images/hex-tidyr.png){.absolute top=0 left=1100 width=\"12%\"}\n\n1. Take the data object you pivoted to long format in the prior practice block\n\n\\\n\n. . . \n\n2. Pivot it back to wide format with `pivot_wider`!\n\n\\\n\n. . . \n\n3. Check your work!\n    - Does it look like the original object you loaded with `read.csv`?\n\n## [Practice: Wrangling!]{.pink} {.smaller}\n\n![](images/hex-magrittr.png){.absolute top=0 left=1100 width=\"12%\"}\n![](images/hex-tidyr.png){.absolute top=0 left=965 width=\"12%\"}\n\n![](images/hex-dplyr.png){.absolute top=115 left=1032 width=\"12%\"}\n![](images/hex-penguins.png){.absolute top=115 left=897 width=\"12%\"}\n\n- Beginning with the \"penguins\" data do the following operations:\n\n. . .\n\n1. Keep only data on female penguins\n    - No male penguins and no individuals where sex is not known\n\n. . .\n\n2. Calculate average bill depth within species **and** island\n\n. . .\n\n3. Reshape _to_ wide format so that each island is a column\n    - Note that if an island doesn't have a given species it should have `NA` (not `0`)\n\n. . .\n\n4. Check your work! What are the dimensions of the resulting dataframe?\n\n. . . \n\n- Should be 6 rows by 5 columns\n\n## [Temperature Check]{.purple}\n\n#### How are you Feeling?\n\n<p align=\"center\">\n<img src=\"comics/debugging.png\" alt=\"Comic-style graph depicting someone's emotional state as they debug code (from initial struggle and defeat to eventual triumph)\">\n</p>\n\n## [Function Tutorial: Learning Objectives]{.orange}\n\nAfter completing this assignment you will be able to:\n\n. . .\n\n- Explain the proper syntax and use of R functions\n- Communicate effectively to an audience of interested non-specialists\n- Apply feedback on an assignment to a successful revision\n- Reflect on the process of revising a presentation based on constructively critical feedback\n\n## [Function Tutorial: FAQ]{.orange} {.smaller}\n\n- Tutorial should be an R Markdown with plain text and code chunks\n    - Write tutorials for your classmates for three functions from packages on CRAN\n\n\\\n\n. . .\n\n- Youâll present your tutorials for 5-10 minutes in [Lab \\#5]{.blue}\n    - Get peer feedback then & implement changes before submitting draft 2\n\n\\\n\n. . . \n\n- Submit & present revised tutorials during [Lab \\#7]{.pink}\n\n## [Function Tutorial: Points]{.orange} {.smaller}\n\n- **Draft 1 = 30 pts (12% course grade)**\n    - Overall report â 6 pts\n    - Function tutorial (x3) â 8 pts each\n\n. . . \n\n- **Draft 2 = 40 pts (16% of grade)**\n    - Overall report â 6 pts\n    - Function tutorial (x3) â 8 pts each\n    - Revision response â 3 pts\n    - Edited from draft 1 from peer feedback â 7 pts\n\n. . . \n\n- [**_Optional_**]{.gold} Draft 3 = 40 pts\n    - If submitted, score replaces draft 2\n    - <u>Score can only improve</u> (no way draft 3 reduces total points earned)\n\n## [Picking Functions]{.orange} {.smaller}\n\n- Everyone must pick three _different_ functions\n    - This way no two people present tutorials on the same function\n\n- Unfortunately, means if someone picks before you they \"claim\" that function\n\n. . .\n\n\\\n\n- My plan to do this equitably is as follows:\n    1. Randomize student order and each person picks one function\n    2. Second function picked in reverse of that order (I.e., if you were last to pick in round 1, you're first in round 2)\n    3. Re-randomize student order for third function\n\n\\\n\n- Sound fair? If not, whatâs a good alternative?\n\n## [Nick's _Recommended_ Packages]{.orange} {.smaller}\n\n::::{.columns}\n\n:::{.column width=\"50%\"}\n\n![](images/hex-stringr.png){.absolute top=60 left=-150 width=\"12%\"}\n![](images/hex-dndr.png){.absolute top=255 left=-150 width=\"12%\"}\n![](images/hex-lterpalettefinder.png){.absolute top=450 left=-150 width=\"12%\"}\n\n`stringr` -- Simple, Consistent Wrappers for Common String Operations\n\n\\\n\\\n\n`dndR` -- Dungeons & Dragons Functions for Players and Dungeon Masters\n\n\\\n\\\n\n`lterpalettefinder` -- Extract Color Palettes from Photos and Pick Official LTER Palettes\n\n:::\n\n:::{.column width=\"50%\"}\n\n![](images/hex-supportr.png){.absolute top=60 left=1050 width=\"12%\"}\n![](images/hex-vegan.png){.absolute top=255 left=1050 width=\"12%\"}\n\n`supportR` -- Support Functions for Wrangling and Visualization\n\n\\\n\\\n\\\n\n`vegan` -- Community Ecology Package\n\n:::\n\n::::\n\n## [Forbidden Packages (Sorry!)]{.orange} {.smaller}\n\n![](images/hex-dplyr.png){.absolute top=60 left=-150 width=\"12%\"}\n![](images/hex-tidyr.png){.absolute top=255 left=-150 width=\"12%\"}\n![](images/hex-ggplot2.png){.absolute top=520 left=-150 width=\"12%\"}\n\n- `dplyr` -- A Grammar of Data Manipulation\n    - [Reason:]{.pink} we cover a lot of this in class\n\n\\\n\n- `tidyr` -- Tidy Messy Data\n    - Actually [only 2 forbidden functions:]{.gold} `pivot_longer` & `pivot_wider`\n    - Others are okay to use!\n    - [Reason:]{.pink} we _just_ covered both in class\n\n\\\n\n- `ggplot2` -- Create Elegant Data Visualizations Using the Grammar of Graphics\n    - [Reason:]{.pink} we cover a lot of this in class (see [week 6]{.blue}) **and** its functions use a really different syntax from what is used by other packages\n\n## [Assignment Q & A]{.gold}\n\n- What questions do you have about this assignment?\n    - No \"dumb\" questions so ask away!\n\n\\\n\n. . .\n\n- Feeling good about next steps?\n\n\n## [Exploring CRAN Packages]{.orange} {.smaller}\n\n- Visit [cran.r-project.org](https://cran.r-project.org/)\n\n\\\n\n- Click \"Packages\" on the left sidebar\n    - Approx. 2/3 down sidebar items\n\n\\\n\n- Click \"Table of available packages, sorted by name\"\n\n\\\n\n- Scroll through and look for one with a cool name / title!\n\n## [Practice: Exploring CRAN]{.pink}\n\n- Explore available packages / functions\n\n\\\n\n- Select 7-10 functions so you have alternates (if needed)\n\n\\\n\n- We will pick functions during next lecture ([Lecture \\#4]{.blue})\n\n## [Temperature Check]{.purple}\n\n#### How are you Feeling?\n\n<p align=\"center\">\n<img src=\"comics/debugging.png\" alt=\"Comic-style graph depicting someone's emotional state as they debug code (from initial struggle and defeat to eventual triumph)\">\n</p>\n\n## [Upcoming Due Dates]{.blue} {.smaller}\n\n::::{.columns}\n\n:::{.column width=\"50%\"}\n\n### Due before lecture\n\n#### (By midnight)\n\n- Homework \\#3\n- Pick 7-10 possible functions for Function Tutorial assignment\n    - Remember, they **_must_** be from CRAN packages!\n\n\n:::\n\n:::{.column width=\"50%\"}\n\n### Due before lab\n\n#### (By midnight)\n\n- Muddiest Point \\#4\n\n:::\n\n::::\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}