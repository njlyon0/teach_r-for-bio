{
  "hash": "9998777b8843ca09330fe18d42097557",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Intro to Data Science\"\nauthor: \"Lecture 3 -- R Markdowns & Data Wrangling (P1)\"\nengine: knitr\nformat: \n  revealjs: \n    slide-number: c\n    scrollable: false\n    code-overflow: wrap\n    code-line-numbers: false\n    code-copy: hover\n    theme: [night, slides.scss]\n    reference-location: document\n    footer: \"[Programming in R for Biologists](https://njlyon0.github.io/teach_r-for-biologists/)\"\n---\n\n\n## A Guide to Your Process\n\n### [Scheduling]{.blue}\n\n### [Learning Objectives]{.purple}\n\n### [Practice]{.pink}\n\n### [Supporting Information]{.orange}\n\n### [Class Discussion]{.gold}\n\n## [Today's Plan]{.blue}\n\n- R Markdown Files\n- Loading Data\n- Working with Data\n- Tidyverse - `dplyr`\n\n## [Today's Learning Objectives]{.purple}\n\nAfter today's session you will be able to:\n\n. . .\n\n- Define the three major components of RMarkdown files (.Rmd)\n- Write code to load external data into R\n- Explore data with base R tools\n- Manipulate data with `dplyr`\n\n## [GitHub Review]{.gold} {.smaller}\n\n- Great work last week!\n\n\\\n\n. . .\n\n- In the next week or two (i.e., before the second half of the course) I would like you to:\n    - Make _another_ practice repository (or maybe 2!)\n\n\\\n\n. . .\n\n- What questions do you have about this?\n    - Does this feel reasonable to you?\n\n## [RMarkdown Files Intro]{.orange} {.smaller}\n\nRMarkdown (Rmd) files have three sections:\n\n. . . \n\n1. Metadata (YAML)\n    - Controls formatting of document\n\n\\\n\n. . . \n\n2. Plain Text\n    - Technically written in [markdown]{.purple} (a text-formatting language)\n\n\\\n\n. . . \n\n3. Code [chunks]{.purple}\n    - Essentially mini R scripts within the larger file!\n\n## [RMarkdown Analogy]{.orange}\n\n![](images/logo-r.png){.absolute top=110 left=160 width=\"15%\" fig-alt=\"R logo\"}\n\n![](images/chocolate.png){.absolute top=300 left=-10 width=\"50%\" fig-alt=\"picture of a chocolate bar\"}\n\n![](images/hex-rmarkdown.png){.absolute top=105 left=720 width=\"11%\" fig-alt=\"hex logo for the rmarkdown package\"}\n\n![](images/cookie.png){.absolute top=250 left=625 width=\"30%\" fig-alt=\"picture of a chocolate chip cookie\"}\n\n## [Rmds Part 1: Metadata]{.orange} {.smaller}\n\n- Document formatting metadata is called YAML\n    - <u>Y</u>et <u>A</u>nother <u>M</u>arkup <u>L</u>anguage\n\n\\\n\n. . .\n\n- Defines document header information & formatting\n    - Title, Author, Date\n    - File output type\n\n\\\n\n. . .\n\n\n- Output options:\n    - HTML = like a webpage but outputs as a file rather than a living website\n    - PDF\n\n## [Rmds Part 2: Plain Text]{.orange} \n\n- Write text just like you would in MS Word / etc.\n\n\\\n\n. . .\n\n- _But_, there is no toolbar with buttons for doing formatting\n\n\\\n\n. . . \n\n- Instead [markdown]{.purple} syntax is required to accomplish these tweaks\n\n## [Markdown Syntax]{.orange} {.smaller}\n\n- Your function tutorials have four **required** markdown styles:\n\n\\\n\n. . .\n\n1. \\# = headings\n    - _More_ \\# = _smaller_ heading\n\n2. \\_text\\_ = italics\n\n3. \\*\\*text\\*\\* = bold\n\n4. \\[text\\]\\(link\\) = hyperlinked text\n\n\\\n\nOther format options here: [markdownguide.org/basic-syntax](https://markdownguide.offshoot.io/basic-syntax/)\n\n## [Rmds Part 3: Code Chunks]{.orange} {.smaller}\n\nLet's look at the structure of an example code chunk\n\n:::{.r-stack}\n\n![](images/code-chunk.png){.fragment .fade-out fig-alt=\"Screen capture of a code chunk from an Rmarkdown file where the echo option is set to false, the chunk is named 'pressure', and the `plot` function is used on an object also named 'pressure'\"}\n\n![](images/code-chunk-annotated.png){.fragment fig-alt=\"Screen capture of the same code chunk but with colored boxes annotating the chunk start and end, the code language, the chunk name, the chunk options, and the 'run this chunk' button\"}\n\n:::\n\n\\\n\n. . .\n\nNote that chunk start _must_ be formatted like:\n\n    - ```{language chunk_name, option_1, option_2, ...}\n\n## [Code Chunks Options]{.orange}\n\nLet's check out three crucial code chunk options!\n\n. . . \n\n<p align=\"center\">\n<img src=\"images/code-chunk-options.png\" width=\"120%\" alt=\"A table indicating where the rows correspond to the chunk options 'include', 'echo', and 'message' and the columns correspond to whether the chunk's code, outputs, or messages are included in the resulting file. None of the three code possibilities are included when 'include' is false, code is excluded but everything else is included when 'echo' is false, and everything but messages is included when 'message' is false\">\n</p>\n\n. . .\n\n- For a full list of options see [here](www.rstudio.com/wp-content/uploads/2015/03/rmarkdown-reference.pdf)\n\n## [Practice: RMarkdown Files]{.pink} {.smaller}\n\n![](images/hex-rmarkdown.png){.absolute top=0 left=1100 width=\"12%\"}\n\n- Install the `rmarkdown` package\n    - Remember to use the `install.packages` function\n\n\\\n\n. . .\n\n2. Create a new RMarkdown file!\n    - File `<svg aria-label=\"Arrow Right\" role=\"img\" viewBox=\"0 0 448 512\" style=\"height:1em;width:0.88em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:currentColor;overflow:visible;position:relative;\"><title>Arrow Right</title><path d=\"M438.6 278.6c12.5-12.5 12.5-32.8 0-45.3l-160-160c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3L338.8 224 32 224c-17.7 0-32 14.3-32 32s14.3 32 32 32l306.7 0L233.4 393.4c-12.5 12.5-12.5 32.8 0 45.3s32.8 12.5 45.3 0l160-160z\"/></svg>`{=html} New File `<svg aria-label=\"Arrow Right\" role=\"img\" viewBox=\"0 0 448 512\" style=\"height:1em;width:0.88em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:currentColor;overflow:visible;position:relative;\"><title>Arrow Right</title><path d=\"M438.6 278.6c12.5-12.5 12.5-32.8 0-45.3l-160-160c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3L338.8 224 32 224c-17.7 0-32 14.3-32 32s14.3 32 32 32l306.7 0L233.4 393.4c-12.5 12.5-12.5 32.8 0 45.3s32.8 12.5 45.3 0l160-160z\"/></svg>`{=html} [R Markdown...]{.purple}\n    - In resulting pop-up, skip to bottom and click \"OK\"\n\n\\\n\n. . .\n\n3. Look at (1) YAML, (2) Plain text, and (3) code chunks\n\n    - Take notes on anything that jumps out at you\n\n\\\n\n. . .\n\n4. Click the \"knit\" button\n\n## [Temperature Check]{.purple}\n\n#### How are you Feeling?\n\n<p align=\"center\">\n<img src=\"comics/debugging.png\" alt=\"Comic-style graph depicting someone's emotional state as they debug code (from initial struggle and defeat to eventual triumph)\">\n</p>\n\n## [Loading Data]{.orange} {.smaller}\n\n- Function to use depends on file type\n    - CSV = `read.csv`\n    - MS Excel = `readxl::read_excel`\n\n\\\n\n. . .\n\n- Need to assign data to an object to use it later!\n\n\n\\\n\n. . .\n\n- For example:\n\n```{.r}\nmy_data <- read.csv(file = \"my_data_file.csv\")\n```\n\n## [Download Example Data]{.gold}\n\n1. From the course page, download \"minnow.csv\"\n\n\\\n\n2. Move \"minnow.csv\" from your \"Downloads\" folder to your RStudio Project folder\n\n\\\n\n3. Make a new script for today's lecture\n\n## [Practice: Load Data]{.pink} {.smaller}\n\n![](images/hex-dplyr.png){.absolute top=0 left=1100 width=\"12%\" fig-alt=\"hex logo for dplyr R package\"}\n\n- Now, use `read.csv` to read \"minnow.csv\" into R\n    - Remember to assign it to an object!\n\n\\\n\n. . . \n\n- First thing after reading in data: _<u>check structure</u>!_\n    - Can use `str` or `dplyr::glimpse`\n\n\\\n\n. . .\n\n- What do you see?\n\n## [Exploring Data with Base R]{.orange}\n\nTwo ways in base R to access data:\n\n\\\n\n. . . \n\n1. Bracket notation (works similar to vectors)\n\n\\\n\n. . . \n\n2. Dollar sign ($) notation\n\n## [Bracket Notation]{.orange} {.smaller}\n\n- The syntax is: `data[row number, column number]`\n\n\\\n\n. . . \n\n- Let's look at some example cases\n\n```{.r}\n# Get first column\nmy_df[,1]\n\n# Get first row\nmy_df[1,]\n\n# Get the value in the tenth row and fourth column\nmy_df[10, 4]\n```\n\n\\\n\n. . . \n\n- Note that concatenation works here too!\n    - `my_df[c(1, 2, 3), 1]` would get rows 1 through 3 of column 1\n\n## [Dollar Sign Notations]{.orange}\n\n- The syntax is: `data$column`\n\n\\\n\n. . . \n\n- Let's look at an example\n\n```{.r}\n# Get the column titled \"species\"\nmy_df$species\n```\n\n\\\n\n. . . \n\n- Note that this **does not** work for rows!\n\n## [Practice: Base R Data Exploration]{.pink} {.smaller}\n\n1. Using bracket notation:\n    - Access the 7th row of the minnow data\n    - Access the 5th column of the minnow data\n    - What is the value in the 21st row and 3rd column?\n\n\\\n\n. . . \n\n2. Using dollar sign notation:\n    - Check the \"diameter\" column\n    - Look at the \"species\" column\n\n## [Tidyverse Background]{.orange} {.smaller}\n\n- Ecosystem of inter-related packages & functions\n    - Very human-readable\n    - Extremely popular & commonly-used\n\n![](images/hex-tidyverse.png){.absolute top=225 left=381 width=\"25%\" fig-alt=\"tidyverse R package hex logo\"}\n\n![](images/hex-dplyr.png){.absolute top=500 left=0 width=\"12%\" fig-alt=\"dplyr R package hex logo\"}\n\n![](images/hex-ggplot2.png){.absolute top=500 left=150 width=\"12%\" fig-alt=\"ggplot2 R package hex logo\"}\n\n![](images/hex-tidyr.png){.absolute top=500 left=300 width=\"12%\" fig-alt=\"tidyr R package hex logo\"}\n\n![](images/hex-purrr.png){.absolute top=500 left=450 width=\"12%\" fig-alt=\"purrr R package hex logo\"}\n\n![](images/hex-readr.png){.absolute top=500 left=600 width=\"12%\" fig-alt=\"readr R package hex logo\"}\n\n![](images/hex-tibble.png){.absolute top=500 left=750 width=\"12%\" fig-alt=\"tibble R package hex logo\"}\n\n![](images/hex-magrittr.png){.absolute top=500 left=900 width=\"12%\" fig-alt=\"magrittr R package hex logo\"}\n\n## [`dplyr` Part 1: `filter`]{.orange} {.smaller}\n\n- Remember our discussion of [conditionals]{.purple} last week? \n    - Types include: `==`, `|`, `&`, `%in%`, `!=`\n\n\\\n\n. . .\n\n- Subset using conditionals with `filter`\n    - `dplyr::filter` == `subset`\n\n\\\n\n. . .\n\n```{.r}\n# Subset to only butterfly milkweed records\nmilkweed <- dplyr::filter(.data = flowers, species == \"Asclepias tuberosa\")\n```\n\n\\\n\n. . .\n\n- Can use `filter` instead of `subset` just to live fully in the Tidyverse\n    - Just a style choice, so your call!\n\n## [`dplyr` Part 2: `mutate`]{.orange} {.smaller}\n\n- Make new columns with `mutate`\n\n\\\n\n. . .\n\n- Can create multiple columns at the same time\n```{.r}\nmutate(.data = my_df, new1 = 10,\n                      new2 = 2,\n                      new3 = new1 / new2)\n```\n\n\\\n\n. . .\n\n- Has optional `.after` argument to specify where you want the new column\n```{.r}\nmy_df2, <- mutate(.data = my_df,\n                  weight_lb = weight_kg * 2.2,\n                  .after = weight_kg)\n```\n\n## [Column Naming Aside]{.orange} {.smaller} \n\n- Avoid spaces or hyphens (`-`) in column names\n    - Programming languages don't like these characters in column names\n\n. . .\n\n<p align=\"center\">\n<img src=\"comics/case-options.jpg\" alt=\"Comic depicting multiple case options used in coding as the things they're named after\" width=\"70%\">\n</p>\n\n## [`dplyr` Part 3: `select`]{.orange} {.smaller}\n\n- Pick columns to keep or remove with `select`\n\n\\\n\n. . .\n\n- Can choose columns to _keep_ or to _remove_\n```{.r}\n# Keep only species information and count columns\nselect(.data = my_df, species, count)\n\n# Remove the weight column\nselect(.data = my_df, -weight_kg)\n```\n\n\\\n\n. . .\n\n- Notice that column names are **not** in quotes\n    - This is one of the special properties of the Tidyverse\n\n## [Practice: Wrangling with `dplyr`]{.pink} {.smaller}\n\n![](images/hex-dplyr.png){.absolute top=0 left=1100 width=\"12%\" fig-alt=\"dplyr R package hex logo\"}\n\n1. Filter the minnow data to only cases where the species is Stoneroller or Chub\n\n. . .\n\n2. For that subset, make new columns where river depth and fish nest diameter are in meters\n\n. . .\n\n3. Next, keep only the transect, species, diameter in meters, and depth in meters columns\n    - There are two ways of doing this; can you identify them both?\n\n\\\n\n. . .\n\n4. Check your work! What are the dimensions of the final data object?\n\n. . . \n\n- Should be 14 rows and 4 columns\n\n## [Temperature Check]{.purple}\n\n#### How are you Feeling?\n\n<p align=\"center\">\n<img src=\"comics/debugging.png\" alt=\"Comic-style graph depicting someone's emotional state as they debug code (from initial struggle and defeat to eventual triumph)\">\n</p>\n\n## [Upcoming Due Dates]{.blue} {.smaller}\n\n::::{.columns}\n:::{.column width=\"50%\"}\n\n### Due before lab\n\n#### (By midnight)\n\n- Muddiest Point \\#3\n\n:::\n:::{.column width=\"50%\"}\n\n### Due before lecture\n\n#### (By midnight)\n\n- Homework \\#3\n- Pick 7-10 possible functions for Function Tutorial assignment\n    - Visit: [cran.r-project.org](https://cran.r-project.org/)\n    - Click \"Packages\" in left sidebar\n    - Click \"Table of available packages, sorted by name\"\n    - Your possible functions must be from these packages!\n\n:::\n::::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}