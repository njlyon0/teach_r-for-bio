{
  "hash": "dee3f5939772e5877a015cb0951ee405",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Intro to Data Science\"\nauthor: \"Lecture 7 -- Code Iteration\"\nengine: knitr\nformat: \n  revealjs: \n    slide-number: c\n    scrollable: false\n    code-overflow: wrap\n    code-line-numbers: false\n    code-copy: hover\n    theme: [night, slides.scss]\n    reference-location: document\n    footer: \"[Programming in R for Biologists](https://njlyon0.github.io/teach_r-for-biologists/)\"\n---\n\n\n## A Guide to Your Process\n\n### [Scheduling]{.blue}\n\n### [Learning Objectives]{.purple}\n\n### [Practice]{.pink}\n\n### [Supporting Information]{.orange}\n\n### [Class Discussion]{.gold}\n\n## [Today's Plan]{.blue}\n\n- Code Iteration with Loops\n- Conditionals in Loops\n- In-Class Free Work\n\n## [Today's Learning Objectives]{.purple}\n\nAfter today's session you will be able to:\n\n. . .\n\n- Describe the contexts where iteration is useful\n- Apply loops to small arithmetic problems\n- Create a loop with a conditional\n\n## [Repeated Operations]{.orange} {.smaller}\n\n- Often we want to repeat a given operation multiple times\n    - I.e., repeat _iteratively_\n\n\\\n\n. . . \n\n- Could just copy/paste our code for each iteration\n    - Labor intensive & inefficient & ugly (IMO)\n\n\\\n\n. . . \n\n- Copy/pasting fails if you need to do something _many_ times\n    - [Code iteration]{.purple} is our solution to these types of problems!\n\n## [Code Iteration]{.orange} {.smaller}\n\n- Iteration process:\n    1. Define the operation that you want to repeat\n    2. Define the values to be passed through that operation\n    3. Press \"go\" and sit back while the code does the work!\n\n\\\n\n. . . \n\n- Benefits:\n    - Much faster than copy/pasting code\n    - Code is more human-readable / navigable\n    - Allows you to do something else while the code iterates itself!\n\n\\\n\n. . . \n\n- This method is called a \"[for loop]{.purple}\"\n\n## [Loop Syntax]{.orange} {.smaller}\n\n- For loops repeat an operation for each value given to them\n\n\\\n\n. . .\n\n- Fundamental syntax is as follows:\n```{.r}\n# Start of loop\nfor ( index in vector ) {\n\n    # Actual operation of loop\n    function(index) \n\n} # End of loop\n```\n\n\\\n\n. . .\n\n- More info:\n    - [index]{.purple} = placeholder for one value in vector\n    - [vector]{.purple} = set of values to pass through loop\n    - [curly braces]{.purple} (`{`/`}`) to define start/end\n\n## [Loop Example]{.orange} {.smaller}\n\n- Let's check out an example loop to get more comfortable with these!\n\n\\\n\n- Square each integer between 1 and 5\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"|2|5|8|10\"}\n# Loop across vector of numbers\nfor(k in 1:5){\n  \n  # Square that number\n  square_k <- k * k\n  \n  # Print that result\n  print(square_k)\n  \n}\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1\n[1] 4\n[1] 9\n[1] 16\n[1] 25\n```\n\n\n:::\n:::\n\n\n## [Loop Practice]{.pink} {.smaller}\n\n- Make a vector of numbers between 5 and 25\n\n\\\n\n- Write a for loop that:\n    - 1. Takes the square root of each number (see `?sqrt`)\n    - 2. Prints that result (use `print` function)\n\n## [Loop Practice (Answer)]{.pink}\n\n- Demonstrating on only a few numbers\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Define loop\nfor(j in 5:8){\n  \n  # Take square root\n  j_root <- sqrt(x = j)\n  \n  # Print that result\n  print(x = j_root)\n  \n} # Close loop\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2.236068\n[1] 2.44949\n[1] 2.645751\n[1] 2.828427\n```\n\n\n:::\n:::\n\n\n\n\n## [More Loop Practice]{.pink} {.smaller}\n\n- Write a second loop that:\n    1. multiplies each number by 32\n    2. Prints the result in the console\n\n\\\n\n. . .\n\n- Answer:\n```{.r}\nfor(i in 5:25){\n  i_mult <- i * 32\n  print(i_mult)\n}\n```\n\n## [Temperature Check]{.purple}\n\n#### How are you Feeling?\n\n<p align=\"center\">\n<img src=\"comics/debugging.png\" alt=\"Comic-style graph depicting someone's emotional state as they debug code (from initial struggle and defeat to eventual triumph)\">\n</p>\n\n## [Messaging with R]{.orange} {.smaller}\n\n- By default, loops don't put stuff in the Console\n    - This can make figuring out what is going on difficult\n\n\\\n\n. . .\n\n- Fortunately, R contains functions for putting text into the Console\n    - `print` is the one we'll focus on!\n\n\\\n\n. . .\n\n- However, `print` only accepts one vector at a time\n\n\\\n\n. . .\n\n- `paste` makes multiple vectors into one vector\n\n## [`print` + `paste`]{.orange} {.smaller}\n\n- We can combine `print` and `paste` to assemble informative messages!\n\n\\\n\n. . .\n\n- For example:\n\n::: {.cell}\n\n```{.r .cell-code}\n# Use `paste` to combine multiple vectors\ntext <- paste(\"Hello\", \"my\", \"name\", \"is\", \"Nick\")\n\n# Then give that to `print` to return!\nprint(text)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Hello my name is Nick\"\n```\n\n\n:::\n:::\n\n\n\\\n\n. . .\n\n- This can be used in a loop to create messages that change with each iteration!\n\n## [Message Example]{.orange} {.smaller}\n\n- Let's consider an example of a loop that uses `print` and `paste` to make messages\n\n\\\n\n. . . \n\n- For instance:\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"|8\"}\n# Loop across vector of numbers\nfor(k in 1:5){\n  \n  # Square that number\n  square_k <- k * k\n  \n  # Print a message about that result\n  print(paste(\"The square of\", k, \"is\", square_k))\n\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"The square of 1 is 1\"\n[1] \"The square of 2 is 4\"\n[1] \"The square of 3 is 9\"\n[1] \"The square of 4 is 16\"\n[1] \"The square of 5 is 25\"\n```\n\n\n:::\n:::\n\n\n## [Write Messages]{.pink} {.smaller}\n\n- We'll modify your earlier practice loops to make informative messages!\n\n\\\n\n. . .\n\n- For the loop with `j` as the index:\n    - Make the `print` step tell you the starting number and its square root\n\n\\\n\n. . . \n\n- Answer:\n```{.r}\nfor(j in 5:25){\n  j_root <- sqrt(j)\n  print(paste(\"The square root of\", j, \"is\", j_root))\n}\n```\n\n## [More Message Practice]{.pink} {.smaller}\n\n- For the loop with `i` as the index:\n    - Write a message that says each number and what it times 32 is equal to\n\n\\\n\n. . .\n\n- Answer:\n```{.r}\nfor(i in 5:25){\n  i_mult <- i * 32\n  print(paste(i, \"times 32 is equal to\", i_mult))\n}\n```\n\n## [Conditionals]{.orange} {.smaller}\n\n- You can write code to do something _only_ if some condition is met\n    - Do this by using conditionals!\n\n\\\n\n. . .\n\n- Syntax is similar to logical statements for subsetting\n    - Recall our earlier conversations about conditional operators:\n    - `==`, `&`, `>`, etc.\n\n\\\n\n. . .\n\n- Two main conditional functions: `if` & `else`\n\n## [Conditional Example]{.orange}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Do something if a condition is met\nif(2 == 2){\n\n  print(\"Math is mathing!\")\n\n  # If that condition is not met...\n} else { \n  \n  print(\"Math is--somehow--not mathing...\")\n\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Math is mathing!\"\n```\n\n\n:::\n:::\n\n\n## [Conditional Syntax]{.orange} {.smaller}\n\n- `if` wants:\n    - Condition to check in parentheses `(...)`\n    - What to do if the condition **_is_** met in curly braces `{...}`\n\n\\\n\n. . . \n\n- `else` wants:\n    - Only curly braces `{...}` bits\n    - Can only be used if `if` is used first\n\n## [Multiple `if`s]{.orange} {.smaller}\n\n- The example in the previous slide is just for one `if`\n    - Essentially '[either this or that]{.purple}'\n\n\\\n\n. . .\n\n- You can add multiple conditions if desired!\n```{.r}\n# If the number is less than 0\nif(x < 0){\n  print(\"Number is negative\")\n\n# If it's more than 0\nelse if(x > 0){\n  print(\"Number is positive\")\n\n# Otherwise ...\n} else { print(\"Number is zero\") }\n```\n- See how the second condition uses `else if(...){...}`?\n\n## [Conditionals in Loops]{.orange} {.smaller}\n\n- You can use conditionals to make one loop handle _multiple_ possibilities\n\n\\\n\n. . . \n\n- For example:\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"|8|9|12|13\"}\n# Test vector\nmy_vec <- c(-10, -9, -8, 0, 4, 5, 6)\n\n# Loop across it\nfor(value in my_vec){\n  \n  # Make negative numbers positive\n  if(value < 0){ \n    print(value * -1)\n    \n    # Take the square root of positive numbers\n  } else if(value > 0){\n      print(sqrt(value)) }\n  \n} # Close loop curly brace\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 10\n[1] 9\n[1] 8\n[1] 2\n[1] 2.236068\n[1] 2.44949\n```\n\n\n:::\n:::\n\n\n## [Loop Conditional Visual]{.orange} {.smaller}\n\n<p align=\"center\">\n<img src=\"comics/loop-conditionals.jpg\" alt=\"Comic showing a loop across a set of monster shapes where triangle creatures get sunglasses but non-triangles get a hat because of an 'if' and 'else' use in the loop\" width=\"80%\">\n</p>\n\n## [Loops with Conditionals]{.pink} {.smaller}\n\n- Write a loop that:\n    - Uses `g` as the index\n    - Uses a vector that has all the integers between 10 and 20\n    - Prints each value in the vector\n\n\\\n\n. . .\n\n- Add two conditionals to that loop:\n    1. If `g` is less than 14, `print` \"Less than 14\"\n    2. Otherwise, `print` the value as-is\n\n## [Temperature Check]{.purple}\n\n#### How are you Feeling?\n\n<p align=\"center\">\n<img src=\"comics/debugging.png\" alt=\"Comic-style graph depicting someone's emotional state as they debug code (from initial struggle and defeat to eventual triumph)\">\n</p>\n\n## [In-Class Free Work]{.gold} {.smaller}\n\n- Draft 2 of Function Tutorials is due next week!\n    - Presentations during [Lecture \\#8]{.blue}\n    - Requires 'revision response' where you discuss what changes you made due to feedback\n\n\\\n\n. . . \n\n- GitHub Presence is due next week\n    - You have most of what you need for full points on that already\n\n\\\n\n. . . \n\n- Any questions about upcoming assignments / past topics?\n    - I _strongly_ recommend taking advantage of this time!\n\n## [Upcoming Due Dates]{.blue} {.smaller}\n\n::::{.columns}\n:::{.column width=\"50%\"}\n\n### Due before lecture\n\n#### (By midnight)\n\n- Homework \\#7\n- Submit [Draft 2]{.blue} of Function Tutorials\n    - Double check rubric to see that you're not leaving any points on the table!\n    - Remember to also <u>submit the Revision Response</u>\n\n:::\n:::{.column width=\"50%\"}\n\n### Due before lab\n\n#### (By midnight)\n\n- Homework \\#8\n- Muddiest Point \\#8\n- GitHub Presence\n\n:::\n::::\n",
    "supporting": [
      "slides_7a_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}