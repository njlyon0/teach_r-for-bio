{
  "hash": "14c0661f46fd9a82197d89da19140286",
  "result": {
    "markdown": "---\ntitle: \"Intro to Data Science\"\nauthor: \"Lecture 7 -- Code Iteration\"\nengine: knitr\nformat: \n  revealjs: \n    slide-number: c\n    scrollable: false\n    code-overflow: wrap\n    code-line-numbers: false\n    code-copy: hover\n    theme: [night, slides.scss]\n    reference-location: document\n    footer: \"[Programming in R for Biologists](https://njlyon0.github.io/teach_r-for-biologists/)\"\n---\n\n\n## A Guide to Your Process\n\n### [Scheduling]{.blue}\n\n### [Learning Objectives]{.purple}\n\n### [Practice]{.pink}\n\n### [Supporting Information]{.orange}\n\n### [Class Discussion]{.gold}\n\n## [Today's Plan]{.blue}\n\n- Choose [Lab \\#8]{.blue} \"Bonus Content\"\n- Code Iteration with Loops\n- Conditionals in Loops\n- In-Class Free Work\n\n## [Today's Learning Objectives]{.purple}\n\nAfter today's session you will be able to:\n\n. . .\n\n- Describe the contexts where iteration is useful\n- Apply loops to small arithmetic problems\n- Create a loop with a conditional\n\n## [Bonus Content]{.gold} {.smaller}\n\n- [Lab \\#8]{.blue} topic is your choice!\n\n\\\n\n- Some options include:\n    - Biodiversity and ecological communities\n    - Pairwise comparisons (i.e., what to do after ANOVA says 'at least one group differs')\n    - Heatmaps\n\n\\\n\n- What 1-2 topic(s) seem interesting to you?\n    - Feel free to propose topics that aren't listed!\n\n## [Repeated Operations]{.orange} {.smaller}\n\n- Often we want to repeat a given operation multiple times\n    - I.e., repeat _iteratively_\n\n\\\n\n. . . \n\n- Could just copy/paste our code for each iteration\n    - Labor intensive & inefficient & ugly (IMO)\n\n\\\n\n. . . \n\n- Copy/pasting fails if you need to do something _many_ times\n    - [Code iteration]{.purple} is our solution to these types of problems!\n\n## [Code Iteration]{.orange} {.smaller}\n\n- Iteration process:\n    1. Define the operation that you want to repeat\n    2. Define what the values to be passed through that operation\n    3. Press \"go\" and sit back while the code does the work!\n\n\\\n\n. . . \n\n- Benefits:\n    - Much faster than copy/pasting code\n    - Code is more human-readable / navigable\n    - Allows you to do something else while the code iterates itself!\n\n\\\n\n. . . \n\n- This method is named \"for loop\"\n\n## [Loop Syntax]{.orange} {.smaller}\n\n- For loops repeat an operation for each value given to them\n\n\\\n\n. . .\n\n- Fundamental syntax is as follows:\n```{.r}\n# Start of loop\nfor ( index in vector ) {\n\n    # Actual operation of loop\n    function(index) \n\n} # End of loop\n```\n\n\\\n\n. . .\n\n- More info:\n    - index = placeholder for one value in vector\n    - vector = set of values to pass through loop\n    - curly brace (`{`/`}`) to define start/end\n\n## [Loop Example]{.orange} {.smaller}\n\n- Let's check out an example loop to get more comfortable with these!\n\n\\\n\n- Square each integer between 1 and 5\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"|2|5|8|10\"}\n# Loop across vector of numbers\nfor(k in 1:5){\n  \n  # Square that number\n  square_k <- k * k\n  \n  # Print that result\n  print(square_k)\n  \n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n[1] 4\n[1] 9\n[1] 16\n[1] 25\n```\n:::\n:::\n\n\n## [Loop Practice]{.pink} {.smaller}\n\n- Make a vector of numbers between 5 and 25\n\n\\\n\n- Write a for loop that takes the square root of each number\n    - Function is `sqrt`\n\n- The loop should print the result for each square root in the Console\n    - Function is `print`\n\n\\\n\n. . . \n\n- Answer:\n```{.r}\nfor(j in 5:25){\n  j_root <- sqrt(j)\n  print(j_root)\n}\n```\n\n## [More Loop Practice]{.pink} {.smaller}\n\n- Write a second loop that:\n    1. multiplies each number by 32\n    2. Prints the result in the console\n\n\\\n\n. . .\n\n- Answer:\n```{.r}\nfor(i in 5:25){\n  i_mult <- i * 32\n  print(i_mult)\n}\n```\n\n## [Temperature Check]{.purple}\n\n#### How are you Feeling?\n\n<p align=\"center\">\n<img src=\"comics/debugging.png\" alt=\"Comic-style graph depicting someone's emotional state as they debug code (from initial struggle and defeat to eventual triumph)\">\n</p>\n\n\n\n## [Messaging with R]{.orange} {.smaller}\n\n\n\n## [Messaging Continued]{.orange} {.smaller}\n\n\n\n## [`print` + `paste`]{.orange} {.smaller}\n\n\n\n## [Write Messages]{.pink} {.smaller}\n\n\n\n\n## [Conditionals]{.orange} {.smaller}\n\n\n\n## [Conditional Syntax]{.orange} {.smaller}\n\n\n\n## [`if` vs. `else`]{.orange} {.smaller}\n\n\n\n## [Conditionals in Loops]{.orange} {.smaller}\n\n\n\n## [Loop Conditional Visual]{.orange} {.smaller}\n\n<p align=\"center\">\n<img src=\"comics/loop-conditionals.jpg\" alt=\"Comic showing a loop across a set of monster shapes where triangle creatures get sunglasses but non-triangles get a hat because of an 'if' and 'else' use in the loop\" width=\"80%\">\n</p>\n\n## [Loops with Conditionals]{.pink} {.smaller}\n\n\n\n## [Temperature Check]{.purple}\n\n#### How are you Feeling?\n\n<p align=\"center\">\n<img src=\"comics/debugging.png\" alt=\"Comic-style graph depicting someone's emotional state as they debug code (from initial struggle and defeat to eventual triumph)\">\n</p>\n\n## [In-Class Free Work]{.gold} {.smaller}\n\n- Draft 2 of Function Tutorials is due tomorrow!\n    - Presentations during [Lab \\#7]{.blue} (this week)!\n    - Requires 'revision response' where you discuss what changes you made due to feedback\n\n\\\n\n. . . \n\n- GitHub Presence is due next week\n    - You have most of what you need for full points on that already\n\n\\\n\n. . . \n\n- Any questions about upcoming assignments / past topics?\n    - I _strongly_ recommend taking advantage of this time!\n\n## [Upcoming Due Dates]{.blue} {.smaller}\n\n::::{.columns}\n:::{.column width=\"50%\"}\n\n### Due before lab\n\n#### (By midnight)\n\n- Muddiest Point \\#7\n- Submit [Draft 2]{.pink} of Function Tutorials\n    - Remember to include <u>_both_</u> the revised .Rmd _and_ your \"revision response\"\n    - Check the rubric for more details\n\n:::\n:::{.column width=\"50%\"}\n\n### Due before lecture\n\n#### (By midnight)\n\n- Homework \\#7\n\n:::\n::::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}