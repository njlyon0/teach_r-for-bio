{
  "hash": "080c430709828f046287fee4bd4f4cb3",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Intro to Data Science\"\nauthor: \"Lecture 6 -- Visualization I\"\nengine: knitr\nformat: \n  revealjs: \n    slide-number: c\n    scrollable: false\n    code-overflow: wrap\n    code-line-numbers: false\n    code-copy: hover\n    theme: [night, slides.scss]\n    reference-location: document\n    footer: \"[Programming in R for Biologists](https://njlyon0.github.io/teach_r-for-biologists/)\"\n---\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\n## A Guide to Your Process\n\n### [Scheduling]{.blue}\n\n### [Learning Objectives]{.purple}\n\n### [Practice]{.pink}\n\n### [Supporting Information]{.orange}\n\n### [Class Discussion]{.gold}\n\n## [Today's Plan]{.blue}\n\n- Function Tutorial Debrief\n- Data Visualization with `ggplot2`\n    - Core ggplot\n    - Adding geometries\n    - Multiple geometries\n    - Setting color\n    - Customizing colors\n\n## [Today's Learning Objectives]{.purple}\n\nAfter today's session you will be able to:\n\n. . .\n\n- Discuss presentations and articulate plans for revision\n- Create `ggplot2` graphs\n- Modify `ggplot2` graph aesthetics and customize labels / colors\n\n## [Function Tutorial Debrief]{.gold}\n\n- How did y'all feel that went?\n\n\\\n\n. . .\n\n- What do you plan on doing differently for the 2^nd^ presentation?\n\n\\\n\n. . .\n\n- What questions do you have about the revision process / 2^nd^ draft?\n\n## [Data Visualization]{.orange} {.smaller}\n\n- Fundamental part of scientific process\n\n\\\n\n. . .\n\n- Important for:\n    - Figures in papers / presentations\n    - \"Eyeball test\" of statistical results\n    - Identifying errors in data (e.g., unreasonably high/low points, typos, etc.)\n\n\\\n\n. . .\n\n- Note on word choice\n    - Visualization == figures == graphs == plots\n    - \"Figures\" are implicitly publication-quality but fundamentally still graphs\n\n## [Data Viz in R]{.orange} {.smaller}\n\nTwo main options for data viz in R:\n\n::::{.columns}\n:::{.column width=\"50%\"}\n### Base R\n\n- From base R\n- Simple but functional\n- Base R function syntax\n\n:::\n:::{.column width=\"50%\"}\n### `ggplot2`\n\n- From `ggplot2` package\n- Modular functions allow range of complexity\n- Syntax similar to tidyverse but not identical\n- Name derived from _Grammar of Graphics_\n\n:::\n::::\n\n## [Data Viz in R]{.orange} {.smaller}\n\nTwo main options for data viz in R:\n\n::::{.columns}\n:::{.column width=\"50%\"}\n### Base R\n\n\\\n\n<img src=\"images/graph-base-plot.png\" alt=\"Example 'base R' graph with a simple aesthetic\">\n\n:::\n:::{.column width=\"50%\"}\n### `ggplot2`\n\n<img src=\"images/graph-ggplot2.png\" alt=\"Example ggplot2 graph with classic ggplot2-aesthetics\">\n\n:::\n::::\n\n## [Plot Structure: `ggplot2`]{.orange} {.smaller}\n\n- Requires three components (+ optional fourth)\n\n\\\n\n1. [Data object]{.purple} to plot\n\n. . .\n\n2. Mapping [aesthetics]{.purple}\n    - E.g., which column is on each axis, etc.\n    - I.e., which variable is \"mapped to\" a given plot component\n\n. . .\n\n3. One or more [geometries]{.purple}\n    - Determines what type of plot you have\n\n. . .\n\n4. [Theme]{.purple} elements\n    - Controls plot-level formatting\n\n## [Core ggplot Creation]{.orange} {.smaller}\n\n- Core plot is just [data object]{.purple} + [aesthetics]{.purple}\n    - Tells ggplot to create a plot with specified axes\n\n\\\n\n. . .\n\n- Data object is inherited by _every_ other layer of the plot\n    - So only needs to be specified once!\n\n\\\n\n. . .\n\n- What aesthetics can you specify?\n    - X/Y axes\n    - Color(s) of geometries\n\n## [Core Graph Syntax]{.orange}\n\n- Fundamental graph syntax requires two functions:\n    1. `ggplot` \n    2. `aes`\n\n\\\n\n- Check out this example:\n```{.r}\n# Make a simple `ggplot2` plot\nggplot(data = my_df, mapping = aes(x = x_var, y = y_var))\n```\n\n## [Core `ggplot2`]{.pink} {.smaller}\n\n![](images/hex-ggplot2.png){.absolute top=0 left=1100 width=\"12%\" fig-alt=\"hex logo for ggplot2 R package\"}\n\n- Get prepared for this practice\n    - Create a script for this week\n    - Download and read in the \"minnow.csv\" data\n\n\\\n\n. . .\n\n- Using `ggplot2`, make a graph with the minnow data where:\n    - Fish species is on the X axis\n    - Diameter of fish nest is on the Y axis\n\n\\\n\n. . .\n\n- What does the resulting graph look like?\n\n## [Core `ggplot2`]{.pink}\n\n![](images/hex-ggplot2.png){.absolute top=0 left=1100 width=\"12%\" fig-alt=\"hex logo for ggplot2 R package\"}\n\n\\\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](slides_6a_files/figure-revealjs/ex-graph-v1-1.png){fig-align='center' width=576}\n:::\n:::\n\n\n## [Plot Type & Geometries]{.orange} {.smaller}\n\n- Why does the plot not have anything on it?\n    - Because `ggplot2` needs you to specify your [geometry]{.purple}!\n\n\\\n\n. . .\n\n- Geometries are functions you add to a plot to make the desired plot type\n    - All start with `geom_...`\n    - E.g., `geom_bar`, `geom_point`, etc.\n\n\\\n\n. . .\n\n- Geometry determines the type of plot\n    - E.g., bar plot, scatterplot, etc.\n\n## [Adding Elements]{.orange} {.smaller}\n\n- Use `+` to add geometries to a plot\n\n\\\n\n. . .\n\n- Example syntax:\n```{.r}\n# Make a simple `ggplot2` plot\nggplot(data = my_df, mapping = aes(x = x_var, y = y_var)) +\n    # Make it a scatterplot\n    geom_point()\n```\n\n\\\n\n. . .\n\n- This syntax is <u>unique to `ggplot2`</u>\n    - Refers to stacked layers of plot information\n\n## [Geometries]{.pink} {.smaller}\n\n![](images/hex-ggplot2.png){.absolute top=0 left=1100 width=\"12%\" fig-alt=\"hex logo for ggplot2 R package\"}\n\n- Let's practice adding geometries!\n    - Copy the code you wrote for the previous graph\n    - Add a `+` to the end of the line\n    - In the next line add `geom_point()`\n\n\\\n\n. . .\n\n- What does that give you?\n\n\\\n\n. . .\n\n- Copy that code and change `geom_point()` to `geom_boxplot()`\n    - What do you have now?\n\n## [Geometries]{.pink}\n\n![](images/hex-ggplot2.png){.absolute top=0 left=1100 width=\"12%\" fig-alt=\"hex logo for ggplot2 R package\"}\n\n::::{.columns}\n:::{.column width=\"50%\"}\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](slides_6a_files/figure-revealjs/ex-graph-v2a-1.png){width=960}\n:::\n:::\n\n\n:::\n:::{.column width=\"50%\"}\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](slides_6a_files/figure-revealjs/ex-graph-v2b-1.png){width=960}\n:::\n:::\n\n\n:::\n::::\n\n## [Temperature Check]{.purple}\n\n#### How are you Feeling?\n\n<p align=\"center\">\n<img src=\"comics/debugging.png\" alt=\"Comic-style graph depicting someone's emotional state as they debug code (from initial struggle and defeat to eventual triumph)\">\n</p>\n\n## [Geometries Cont.]{.orange} {.smaller}\n\n- Geometries \"know\" what data to use because of your core plot\n    - I.e., in your top-level `ggplot` and `aes` functions\n\n\\\n\n. . .\n\n- Geometries do support arguments but minimal graphs don't use them\n\n\\\n\n. . .\n\n- Mappings/aesthetics inherited from top to bottom\n\n## [Multiple Geometries]{.orange} {.smaller}\n\n- You can add multiple geometries to the _same_ plot!\n    - But order matters!\n\n\\\n\n. . .\n\n- Geometries added later are \"in front\" of earlier geometries\n\n\\\n\n. . .\n\n- Similar to how first geometry is \"in front\" of core ggplot\n\n## [Multiple Geometries]{.pink} {.smaller}\n\n![](images/hex-ggplot2.png){.absolute top=0 left=1100 width=\"12%\" fig-alt=\"hex logo for ggplot2 R package\"}\n\n- Make a graph with both `geom_boxplot` and `geom_point`\n    - Add a `+` after whichever you put first, then put the other\n\n\\\n\n. . .\n\n- What happens if `geom_boxplot` is first?\n\n\\\n\n. . .\n\n- Versus if `geom_point` is first?\n\n## [Multiple Geometries]{.pink} {.smaller}\n\n![](images/hex-ggplot2.png){.absolute top=0 left=1100 width=\"12%\" fig-alt=\"hex logo for ggplot2 R package\"}\n\n::::{.columns}\n:::{.column width=\"50%\"}\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](slides_6a_files/figure-revealjs/ex-graph-v3a-1.png){width=960}\n:::\n:::\n\n\n:::\n:::{.column width=\"50%\"}\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](slides_6a_files/figure-revealjs/ex-graph-v3b-1.png){width=960}\n:::\n:::\n\n\n:::\n::::\n\nSee how points are \"behind\" boxplots on the left?\n\n## [Axis Titles]{.orange} {.smaller}\n\n- Axis titles default to column name passed to `aes`\n\n\\\n\n. . .\n\n- Good column names are usually not good plot axis labels!\n\n\\\n\n. . .\n\n- Column names should have no spaces / may or may not be capitalized\n    - Plot axes should have spaces and be at least somewhat capitalized\n    - Units may be in parentheses\n\n## [Manual Axis Labels]{.orange} {.smaller}\n\n- Can set labels manually to be prettier with `labs` function!\n\n\\\n\n. . .\n\n- `labs` has arguments `x` and `y` that expect characters to put as titles\n\n\\\n\n. . .\n\n- Example syntax:\n```{.r}\n# Make a simple `ggplot2` plot\nggplot(data = my_df, mapping = aes(x = x_var, y = y_var)) +\n    # Make it a scatterplot\n    geom_point() +\n    # Add custom axis labels\n    labs(x = \"Custom X Label\", y = \"Custom Y Label\")\n```\n\n## [Axis Labels]{.pink} {.smaller}\n\n![](images/hex-ggplot2.png){.absolute top=0 left=1100 width=\"12%\" fig-alt=\"hex logo for ggplot2 R package\"}\n\n- Copy your code for the plot with:\n    - Both a boxplot and points\n    - Points in front of boxplots\n\n\\\n\n. . .\n\n- Use `labs` to do do the following:\n    - Capitalize \"species\" and \"diameter\"\n    - Put \"cm\" in parentheses on the y-axis\n\n\\\n\n. . .\n\n- What does that graph look like?\n\n## [Axis Labels]{.pink}\n\n![](images/hex-ggplot2.png){.absolute top=0 left=1100 width=\"12%\" fig-alt=\"hex logo for ggplot2 R package\"}\n\n\\\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](slides_6a_files/figure-revealjs/ex-graph-v4-1.png){fig-align='center' width=576}\n:::\n:::\n\n\n## [Manual Label Cautionary Note]{.orange} {.smaller}\n\n- If you mis-apply the labels your plot will still work but will be wrong\n\n<p align=\"center\">\n<img src=\"images/graph-bad-labels.png\" alt=\"Two scatterplots side by side with the same configuration of points but flipped axis labels.\" width=\"80%\">\n</p>\n\n- Same plot but flipped labels and no way to know which is correct!\n\n## [Coloring Geometries]{.orange} {.smaller}\n\n- You can color geometries by other columns in the data!\n    - You just need to pass them to the `color` or `fill` aesthetics\n\n\\\n\n. . .\n\n- Example syntax:\n```{.r}\n# Make a plot where the color and y-axis are mapped to the same variable\nggplot(data = my_df, mapping = aes(x = x_var, y = y_var, color = y_var)) +\n    # Make it a scatterplot\n    geom_point() +\n    # Add custom axis labels\n    labs(x = \"Custom X Label\", y = \"Custom Y Label\")\n```\n\n\\\n\n. . .\n\n- Color != Fill\n    - Color = borders / solid points\n    - Fill = interior of shapes / points\n\n## [Geometry Color]{.pink} {.smaller}\n\n![](images/hex-ggplot2.png){.absolute top=0 left=1100 width=\"12%\" fig-alt=\"hex logo for ggplot2 R package\"}\n\n- Take the plot you created during the previous practice:\n    - What happens if you map color to species in the `aes` call at the top?\n\n\\\n\n. . .\n\n- Change `color` to `fill`. Now what does the plot look like?\n\n## [Geometry Color]{.pink} {.smaller}\n\n![](images/hex-ggplot2.png){.absolute top=0 left=1100 width=\"12%\" fig-alt=\"hex logo for ggplot2 R package\"}\n\n::::{.columns}\n:::{.column width=\"50%\"}\n`color = species`\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](slides_6a_files/figure-revealjs/ex-graph-v5a-1.png){width=960}\n:::\n:::\n\n\n:::\n:::{.column width=\"50%\"}\n`fill = species`\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](slides_6a_files/figure-revealjs/ex-graph-v5b-1.png){width=960}\n:::\n:::\n\n\n:::\n::::\n\n## [Geometry Color]{.pink} {.smaller}\n\n![](images/hex-ggplot2.png){.absolute top=0 left=1100 width=\"12%\" fig-alt=\"hex logo for ggplot2 R package\"}\n\n- What happens if you map species to **both** `color` and `fill`?\n\n\\\n\n- Try it and find out!\n\n## [Geometry Color]{.pink} {.smaller}\n\n![](images/hex-ggplot2.png){.absolute top=0 left=1100 width=\"12%\" fig-alt=\"hex logo for ggplot2 R package\"}\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](slides_6a_files/figure-revealjs/ex-graph-v6-1.png){fig-align='center' width=576}\n:::\n:::\n\n\n## [Customizing Colors]{.orange} {.smaller}\n\n<p align=\"center\">\n<img src=\"memes/custom-colors.png\" alt=\"Meme where Pedro Pascal is saying 'life is good but it could be better' in two panels. Top panel is a default color graph then bottom panel is the same graph with custom colors\" width=\"80%\">\n</p>\n\n## [Finding Fun Colors]{.orange} {.smaller}\n\n- Coolors ([coolors.co/palettes/popular](https://coolors.co/palettes/popular))\n    - Many options + search bar to narrow results\n\n\\\n\n. . . \n\n- Color Brewer 2.0 ([colorbrewer2.org](https://colorbrewer2.org/#type=sequential&scheme=BuGn&n=3))\n    - Fewer options but checkbox for colorblind safe palettes only\n\n\\\n\n. . . \n\n- Colors identified as [hexadecimal codes]{.purple}\n    - Hexadecimal structure: \\#**<span style=\"color:red\">RR</span><span style=\"color:green\">GG</span><span style=\"color:blue\">BB</span>**\n\n## [Hexadecimal Aside]{.orange} {.smaller}\n\n- Hexadecimal = 16 digits\n    - 0-9 + a-f\n\n\\\n\n. . . \n\n- Red/Green/Blue hues can be between 0 and 255\n    - \"Colors\" are combinations of 0-255 of R/G/B\n\n\\\n\n. . . \n\n- Color with regular numbers = \\#**<span style=\"color:red\">RRR</span><span style=\"color:green\">GGG</span><span style=\"color:blue\">BBB</span>**\n    - If using hexadecimals: three fewer numbers to store in a computer\n    - Each color x 10^3^-10^6^s of pixels would compound \"extra\" digits' memory demands\n\n## [Manually Setting Colors]{.orange} {.smaller}\n\n- Use `scale_fill_manual()` or `scale_color_manual()`\n    - Each has one argument: `values`\n\n\\\n\n. . . \n\n- Needs a [named vector]{.purple} of hexadecimal codes\n    - E.g., `c(\"name 1\" = \"entry 1\", \"name 2\" = \"entry 2\", ...)`\n\n\\\n\n. . . \n\n- Example syntax: \n```{.r}\n# Make a plot where the color and y-axis are mapped to the same variable\nggplot(data = my_df, mapping = aes(x = x_var, y = y_var, color = y_var)) +\n    # Make it a scatterplot\n    geom_point() +\n    # Add custom axis labels\n    labs(x = \"Custom X Label\", y = \"Custom Y Label\") +\n    # Customize colors\n    scale_color_manual(values = c(\"name 1\" = \"#00FF00\", \"name 2\" = \"#FF0000\", \"name 3\" = \"#0000FF\"))\n```\n\n## [Set Colors]{.pink} {.smaller}\n\n![](images/hex-ggplot2.png){.absolute top=0 left=1100 width=\"12%\" fig-alt=\"hex logo for ggplot2 R package\"}\n\n- To the graph you made in the previous practice:\n    - Make species <u>fill</u> with custom colors\n\n\\\n\n- Visit one of the sites I suggested to pick your colors\n    - Coolors ([coolors.co/palettes/popular](https://coolors.co/palettes/popular))\n    - Color Brewer 2.0 ([colorbrewer2.org](https://colorbrewer2.org/#type=sequential&scheme=BuGn&n=3))\n\n\\\n\n- What does that final plot look like?\n\n## [Set Colors]{.pink} {.smaller}\n\n![](images/hex-ggplot2.png){.absolute top=0 left=1100 width=\"12%\" fig-alt=\"hex logo for ggplot2 R package\"}\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](slides_6a_files/figure-revealjs/ex-graph-v7-1.png){fig-align='center' width=576}\n:::\n:::\n\n\n## [Temperature Check]{.purple}\n\n#### How are you Feeling?\n\n<p align=\"center\">\n<img src=\"comics/debugging.png\" alt=\"Comic-style graph depicting someone's emotional state as they debug code (from initial struggle and defeat to eventual triumph)\">\n</p>\n\n\n\n## [Upcoming Due Dates]{.blue} {.smaller}\n\n::::{.columns}\n:::{.column width=\"50%\"}\n\n### Due before lab\n\n#### (By midnight)\n\n- Muddiest Point \\#6\n\n:::\n:::{.column width=\"50%\"}\n\n### Due before lecture\n\n#### (By midnight)\n\n- Nothing! `<svg aria-label=\"Face Smile\" role=\"img\" viewBox=\"0 0 512 512\" style=\"height:1em;width:1em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:currentColor;overflow:visible;position:relative;\"><title>Face Smile</title><path d=\"M464 256A208 208 0 1 0 48 256a208 208 0 1 0 416 0zM0 256a256 256 0 1 1 512 0A256 256 0 1 1 0 256zm177.6 62.1C192.8 334.5 218.8 352 256 352s63.2-17.5 78.4-33.9c9-9.7 24.2-10.4 33.9-1.4s10.4 24.2 1.4 33.9c-22 23.8-60 49.4-113.6 49.4s-91.7-25.5-113.6-49.4c-9-9.7-8.4-24.9 1.4-33.9s24.9-8.4 33.9 1.4zM144.4 208a32 32 0 1 1 64 0 32 32 0 1 1 -64 0zm192-32a32 32 0 1 1 0 64 32 32 0 1 1 0-64z\"/></svg>`{=html}\n\n:::\n::::\n",
    "supporting": [
      "slides_6a_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}