---
title: "Intro to Data Science"
author: "Lab 6 -- Visualization II"
engine: knitr
format: 
  revealjs: 
    slide-number: c
    scrollable: false
    code-overflow: wrap
    code-line-numbers: false
    code-copy: hover
    theme: [night, slides.scss]
    reference-location: document
    footer: "[Programming in R for Biologists](https://njlyon0.github.io/teach_r-for-biologists/)"
---

```{r libraries}
#| echo: false
#| message: false
#| error: false

# Load needed libraries
## install.packages("librarian")
librarian::shelf(dplyr, magrittr, ggplot2, cowplot, palmerpenguins)
```

```{r ext-data}
# Read in minnow data
fish_df <- read.csv(file = file.path("materials", "data", "minnow.csv"))
```

## A Guide to Your Process

### [Scheduling]{.blue}

### [Learning Objectives]{.purple}

### [Practice]{.pink}

### [Supporting Information]{.orange}

### [Class Discussion]{.gold}

## [Today's Plan]{.blue}

- Muddiest Point Review
- Data Visualization with `ggplot2`
    - Editing `theme` elements
- Multi-Panel Graphs
- GitHub Presence Check-Ins (1-on-1)
    - <u>_Not_</u> graded! Don't stress!

## [Today's Learning Objectives]{.purple}

After today's session you will be able to:

. . .

- Modify background elements in a `ggplot2` graph
- Create publication-quality figures with `ggplot2`
- Explain the difference between plot faceting and plot grids

## [Muddiest Point Review]{.gold}

- Recurring topics from most recent MPs:

\

. . .

- What other topic(s) would you like to review?

## [`ggplot2` Review]{.orange} {.smaller}

- ggplots require: (1) data, (2) aesthetics, (3) geometries
    - Optionally can mess with `theme` parameters

. . .

```{r ex-graph-v7}
#| fig-width: 6
#| fig-align: center

# Create desired example graph
fish_graph <- ggplot(data = fish_df, mapping = aes(x = species, y = diameter_cm, 
                                                   fill = species)) +
  geom_boxplot() +
  geom_point(size = 2) +
  labs(x = "Species", y = "Diameter (cm)") +
  scale_fill_manual(values = c("Chub" = "#ef233c", 
                                "Paired" = "#7209b7", 
                                "Stoneroller" = "#4361ee")) +
  theme(axis.text = element_text(size = 13),
        axis.title = element_text(size = 17))

# Show it
fish_graph
```

## [Theme Internal Structure]{.orange} {.smaller}

- Theme is composed of [elements]{.purple}

\

. . . 

- Elements can be modified as desired inside of `theme` function

\

. . . 

- Each type of element has a different 'helper function' needed to modify that element
    - Change text = use `element_text`
    - Change line = use `element_line`
    - _Remove_ an element with `element_blank`

## [Theme Syntax]{.orange} {.smaller}

- You use the `theme` function _once_ with as many `element_...` functions as you need

\

. . . 

- Here's an example of the proper syntax
```{.r}
# Make a simple scatterplot
ggplot(data = my_df, mapping = aes(x = x_var, y = y_var)) +
    geom_point() +
    # Modify its theme to make the axis font size bigger
    theme(axis.text = element_text(size = 20),
          # Also remove the grid lines
          panel.grid = element_blank())
```

\

. . . 

- Note how the `theme` and `element_...` functions are used together

## [Gridline Theme Components]{.orange} {.smaller}

- You'll learn `theme` argument names as you work more with `ggplot2`

\

. . . 

- Here are a few broadly relevant ones:
    - Gridlines = `panel.grid`
    - Plot background = `panel.background`
    - Axis lines (X & Y) = `axis.line`

## [Get Ready]{.pink} {.smaller}

![](images/hex-ggplot2.png){.absolute top=0 left=1100 width="12%" fig-alt="hex logo for ggplot2 R package"}

1. Create a script for this week

\

2. Load `ggplot2`

\

3. Read "minnow.csv" into R and check the structure!

\

4. Copy the _final_ graph we made last time

\

5. Assign the graph to an object

## [Remove Gridlines]{.pink} {.smaller}

![](images/hex-ggplot2.png){.absolute top=0 left=1100 width="12%" fig-alt="hex logo for ggplot2 R package"}

- To that graph, add the following code:
    - `theme(panel.grid = element_blank())`

\

. . . 

- What does this do to your graph?

\

. . . 

- What happens if you add these two lines as well (**inside** of the `theme` parentheses!)?
    - `panel.background = element_blank()`
    - `axis.line = element_line(color = "black"))`

## [Remove Gridlines]{.pink} {.smaller}

![](images/hex-ggplot2.png){.absolute top=0 left=1100 width="12%" fig-alt="hex logo for ggplot2 R package"}

::::{.columns}
:::{.column width="50%"}

```{r ex-graph-v8a}
#| fig-height: 10

# Make the first theme modification
fish_graph +
  theme(panel.grid = element_blank())
```

:::
:::{.column width="50%"}

```{r ex-graph-v8b}
#| fig-height: 10

# Make the remaining theme modifications
fish_graph + 
  theme(panel.grid = element_blank(),
        panel.background = element_blank(),
        axis.line = element_line(color = "black"))
```

:::
::::

## [Changing Text Size]{.orange} {.smaller}

- We can also modify text size inside of `theme`

\

. . . 

- Axis "[title]{.purple}" vs. axis "[text]{.purple}"
    - `axis.title` = axis label text (given to `labs` function)
    - `axis.text` = text on axis tick marks

\

. . . 

![](images/graph-title-v-text.png){.absolute top=80 left=750 width="40%" fig-alt="Screen capture of the x-axis of a ggplot2-style graph with the axis label (i.e., the bigger text -- a.k.a. 'title') in a rectangle and the axis tick labels (i.e., the smaller text -- a.k.a. 'text') in a separate rectangle"}

. . . 

- Want to modify just X or Y? Add that to the argument name!
    - E.g., `theme(axis.text.x = element_text(...))`

## [Change Text Size]{.pink} {.smaller}

![](images/hex-ggplot2.png){.absolute top=0 left=1100 width="12%" fig-alt="hex logo for ggplot2 R package"}

- Take your most recent graph
    - No gridlines, no background gray square, black axis lines

\

. . .

- And make the following tweaks:
    - Make the axis _title_ font size 15
    - Make the axis _text_ font size 13

\

. . .

- What does that leave you with?

## [Change Text Size]{.pink} {.smaller}

![](images/hex-ggplot2.png){.absolute top=0 left=1100 width="12%" fig-alt="hex logo for ggplot2 R package"}

```{r ex-graph-v9}
#| fig-width: 6
#| fig-align: center

# Create desired example graph and change font size
fish_graph +
  theme(panel.grid = element_blank(),
        panel.background = element_blank(),
        axis.line = element_line(color = "black"),
        axis.title = element_text(size = 15),
        axis.text = element_text(size = 13))
```

## [Customizing Legend]{.orange} {.smaller}

- You can also customize the plot legend in the `theme` function!
    - Legend placement = `legend.position`
    - Legend title = `legend.title`

\

. . .

- `legend.position` works differently than most other elements!
    - Instead of wanting `element_...` it wants `c(<x position>, <y position>)`
    - Positions range from 0 (left / bottom) to 1 (right / top)

## [Customizing Legend Syntax]{.orange} {.smaller}

- Check out an example where we put the legend in the middle of the plot
```{.r}
# Example scatterplot
ggplot(data = my_df, mapping = aes(x = x_var, y = y_var)) +
    geom_point() +
    # With legend in the middle of the space
    theme(legend.position = c(0.5, 0.5))
```

\

. . .

- That graph would have the legend in both:
    - the center (left / right)
    - the middle (top / bottom)

## [Customize Legend]{.pink} {.smaller}

![](images/hex-ggplot2.png){.absolute top=0 left=1100 width="12%" fig-alt="hex logo for ggplot2 R package"}

- To the graph you created last practice:
    - Remove the legend title
    - Experiment with legend placement until youâ€™re happy

\

- You may put the legend wherever you'd like _but_:
    - It <u>should not</u> overlap any points / boxplots

\

- What does _that_ graph look like?

## [Customize Legend]{.pink} {.smaller}

![](images/hex-ggplot2.png){.absolute top=0 left=1100 width="12%" fig-alt="hex logo for ggplot2 R package"}

```{r ex-graph-v10}
#| fig-width: 6
#| fig-align: center

# Create desired example graph and change font size
fish_graph +
  theme(panel.grid = element_blank(),
        panel.background = element_blank(),
        axis.line = element_line(color = "black"),
        axis.title = element_text(size = 15),
        axis.text = element_text(size = 13),
        legend.title = element_blank(),
        legend.position = c(0.8, 0.8))
```

## [Temperature Check]{.purple}

#### How are you Feeling?

<p align="center">
<img src="comics/debugging.png" alt="Comic-style graph depicting someone's emotional state as they debug code (from initial struggle and defeat to eventual triumph)">
</p>

## [Multi-Panel Background]{.orange} {.smaller}

::::{.columns}
:::{.column width="65%"}
- Sometimes nice to have multiple graphs next to each other
    - Makes direct comparison easier
    - Journals have limits on number of figures but multi-panels still count as 1

\

- Two methods (for ggplots):
    1. `ggplot2::facet_grid()`
    2. `cowplot::plot_grid()`

:::
:::{.column width="35%"}

<img src="images/graph-multi-panel.jpg" alt="Three panels of maps of the continental US where each panel shows conditions under a different climate change future" align="right">

:::
::::

## [Facted Graphs]{.orange} {.smaller}

- `ggplot2` has an internal way of handling this called [facets]{.purple}

\

. . . 

- Facets work similarly to geometries
    - You get separate plots for each level of the facet variable

\

. . . 

- Facets must _all_ be the same plot type and _have identical axes_
    - Sometimes not an issue but good to keep in mind!

## [Fact Syntax]{.orange} {.smaller}

- To facet into 1 row x many columns:
```{.r}
# Example scatterplot
ggplot(data = my_df, mapping = aes(x = x_var, y = y_var)) +
    geom_point() +
    # Facet into rows of some other variable
    facet_grid(. ~ facet_variable)
```

\

. . .

- To facet into many rows x 1 column:
```{.r}
# Example scatterplot
ggplot(data = my_df, mapping = aes(x = x_var, y = y_var)) +
    geom_point() +
    # Facet into rows of some other variable
    facet_grid(facet_variable ~ .)
```

## [Facet Example]{.orange} {.smaller}

![](images/hex-penguins.png){.absolute top=0 left=1100 width="12%" fig-alt="hex logo for palmerpenguins R package"}
![](images/hex-ggplot2.png){.absolute top=0 left=965 width="12%" fig-alt="hex logo for ggplot2 R package"}

- `facet_grid(. ~ island)`

```{r ex-facet}
#| fig-width: 6
#| fig-align: center

# Take the penguin data and remove NA values
peng_df <- palmerpenguins::penguins %>%
  dplyr::filter(!is.na(flipper_length_mm) & !is.na(body_mass_g))

# Generate scatterplot
ggplot(data = peng_df, aes(x = body_mass_g, y = flipper_length_mm, color = species)) + 
  geom_point() +
  geom_smooth(method = "lm", formula = "y ~ x", se = F) +
  # facet_grid(island ~ .) + # 3 rows x 1 column
  facet_grid(. ~ island) + # 3 columns by 1 row
  labs(x = "Body Mass (g)", y = "Flipper Length (mm)") +
  supportR::theme_lyon() +
  theme(legend.position = c(0.87, 0.85))
```

## [Facet]{.pink} {.smaller}

![](images/hex-ggplot2.png){.absolute top=0 left=1100 width="12%" fig-alt="hex logo for ggplot2 R package"}

- Using the fish data, make a new graph that:
    - Has nest _diameter_ on the X axis
    - Has nest _depth_ on the Y axis
    - Is a scatterplot
    - Faceted by species
    - Plus any additional `theme` tweaks you want to make!

\

- What does your plot look like?

## [Facet]{.pink} {.smaller}

![](images/hex-ggplot2.png){.absolute top=0 left=1100 width="12%" fig-alt="hex logo for ggplot2 R package"}

```{r ex-graph-v11}
#| fig-width: 6
#| fig-align: center

# Make desired graph
ggplot(data = fish_df, aes(x = diameter_cm, y = depth_cm, color = species)) +
  geom_point() +
  facet_grid(. ~ species) +
  theme_bw() +
  theme(legend.position = "none")
```

## [Plot Grids]{.orange} {.smaller}

- Facets work great when all panels are the same
    - What about when you want <u>different graphs in each panel</u>?

\

. . . 

- `cowplot::plot_grid` lets you put multiple different graphs together

\

. . . 

- Have to make graphs _separately_ first, _then_ combine them

\

. . . 

- Example syntax: 
    - `cowplot::plot_grid(plot1, plot2, ncol = 1, nrow = 2)`
    - A lot of other optional arguments

## [Plot Grid Example]{.orange} {.smaller}

```{r ex-multi-panel}
#| fig-width: 10
#| fig-align: center

# Make faceted plot
first <- penguins %>%
  dplyr::filter(!is.na(sex) & !is.na(flipper_length_mm)) %>%
  ggplot(aes(x = sex, y = flipper_length_mm, fill = sex)) +
  geom_jitter(alpha = 0.3, width = 0.15) +
  geom_violin(alpha = 0.5) +
  labs(x = "Sex", y = "Flipper Length (mm)") +
  scale_fill_manual(values = c("pink", "navy")) +
  supportR::theme_lyon() +
  theme(legend.position = "none")

# Make a second graph
second <- penguins %>% 
  dplyr::filter(!is.na(species) & !is.na(body_mass_g)) %>%
  ggplot(aes(x = species, y = body_mass_g, fill = species)) +
  coord_flip() +
  geom_boxplot(alpha = 0.5) +
  labs(x = "Species", y = "Body Mass (g)") +
  scale_fill_manual(values = c("#8ecae6", "#219ebc", "#023047")) +
  supportR::theme_lyon() +
  theme(legend.position = "none")

# Assemble plot grid
cowplot::plot_grid(first, second, labels = "AUTO", ncol = 2, nrow = 1)
```

## [Plot Grids]{.pink} {.smaller}

![](images/hex-cowplot.png){.absolute top=0 left=1100 width="12%" fig-alt="hex logo for cowplot R package"}
![](images/hex-ggplot2.png){.absolute top=0 left=965 width="12%" fig-alt="hex logo for ggplot2 R package"}

- Make two graphs using the fish data:

1. Copy your faceted graph of diameter vs. depth
    - But remove the facet by species

2. Make a boxplot with flow on the y-axis and species on the x-axis

\

- Using `plot_grid`, make a multi-panel graph with these two graphs
    - Make them side by side (I.e., 2 columns, 1 row)

## [Plot Grids]{.pink} {.smaller}

![](images/hex-cowplot.png){.absolute top=0 left=1100 width="12%" fig-alt="hex logo for cowplot R package"}
![](images/hex-ggplot2.png){.absolute top=0 left=965 width="12%" fig-alt="hex logo for ggplot2 R package"}

\
\

```{r ex-graph-v12}
#| fig-width: 10
#| fig-align: center

# Make desired graph
fish1 <- ggplot(data = fish_df, aes(x = diameter_cm, y = depth_cm, color = species)) +
  geom_point() +
  # facet_grid(. ~ species) +
  labs(x = "Diameter (cm)", y = "Depth (cm)") +
  theme_bw() +
  theme(legend.position = "none")

# Make second desired graph
fish2 <- ggplot(data = fish_df, aes(x = species, y = flow_cfs, fill = species)) +
  geom_boxplot() +
  labs(x = "Species", y = "Flow (cubic feet / second)") +
  theme_bw() +
  theme(legend.position = "none")

# Assemble into a multi-panel graph
cowplot::plot_grid(fish1, fish2, labels = "AUTO", ncol = 2, nrow = 1)
```

## [Temperature Check]{.purple}

#### How are you Feeling?

<p align="center">
<img src="comics/debugging.png" alt="Comic-style graph depicting someone's emotional state as they debug code (from initial struggle and defeat to eventual triumph)">
</p>

## [GitHub Presence FAQ]{.orange} {.smaller}

- Worth 40 pts (16% course grade)

\

- Checklist-style rubric on Canvas

\

- Due [day before _last_ lab]{.blue}

\

- Can basically finish all of it now though if you want!

## [GitHub Presence Assignment]{.orange} {.smaller}

- This assignment will seriously help in interviews / job apps!
    - Demonstrates your data science skills

\

. . .

- I don't want anyone caught unawares by this assignment
    - So I'll meet with each of you 1-on-1 today to see where you're at so far

\

. . .

- Good chance for you to ask any questions you have!
    - Also lets me give you tips for success

## [Upcoming Due Dates]{.blue} {.smaller}

::::{.columns}
:::{.column width="50%"}

### Due before lab

#### (By midnight)

- Homework \#6
- Muddiest Point \#7

:::
:::{.column width="50%"}

### Due before lecture

#### (By midnight)

- Homework \#7
- Submit [Draft 2]{.blue} of Function Tutorials
    - Double check rubric to see that you're not leaving any points on the table!
    - Remember to also <u>submit the Revision Response</u>

:::
::::

## [GitHub 1-on-1s]{.gold} {.smaller}

- Stick around until we do our 1-on-1

\

- After you have met with me you can leave
    - Though you're welcome to stay and work on Homework \#6 / course assignments!

\

- Any volunteers to go first?
