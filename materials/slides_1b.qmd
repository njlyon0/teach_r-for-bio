---
title: "Intro to Data Science"
author: "Lab 1 -- RStudio & Base R"
engine: knitr
format: 
  revealjs: 
    slide-number: c
    scrollable: false
    code-overflow: wrap
    code-line-numbers: false
    code-copy: hover
    theme: [night, slides.scss]
    reference-location: document
    footer: "[Programming in R for Biologists](https://njlyon0.github.io/teach_r-for-biologists/)"
---

## A Guide to Your Process

### [Scheduling]{.blue}

### [Learning Objectives]{.purple}

### [Practice]{.pink}

### [Supporting Information]{.orange}

### [Class Discussion]{.gold}

## [Today's Plan]{.blue}

- Installation Check (R + RStudio)
- Navigating RStudio
- RStudio Projects
- R Scripts
- "Base" R

## [Today's Learning Objectives]{.purple}

After today's session you will be able to:

. . .

- Set up RStudio on your computer
- Create an RStudio Project
- Use R Scripts
- Define fundamental base R terms
    - E.g., object, assign, function, arguments, etc.
- Solve simple arithmetic operations using R

## [Installation Check: R & RStudio]{.gold}

:::{.incremental}

- Did anyone <u>_not_</u> get [R]{.orange} installed?

\

- Did anyone <u>_not_</u> get [RStudio]{.orange} installed?

\

- Once you have both installed, please open [RStudio]{.orange}

:::

## [R versus RStudio]{.orange} {.smaller}

::::{.columns}
:::{.column width="50%"}

![](images/logo-r.png){.absolute top=100 left=150 width="15%" fig-alt="R logo"}

:::
:::{.column width="50%"}

![](images/logo-rstudio.png){.absolute top=100 left=580 width="35%" fig-alt="RStudio logo"}

:::
::::

## [R versus RStudio]{.orange} {.smaller}

::::{.columns}
:::{.column width="50%"}

![](images/logo-r.png){.absolute top=100 left=150 width="15%" fig-alt="R logo"}
\
\
\
\

- Access to fundamental R operations
- Not aesthetically pleasing
    - In my opinion `r fontawesome::fa(name = "smile", a11y = "sem")`
- Faster for _very_ complex operations
    - Unlikely to matter for this course!

:::
:::{.column width="50%"}

![](images/logo-rstudio.png){.absolute top=100 left=580 width="35%" fig-alt="RStudio logo"}

:::
::::

## [R versus RStudio]{.orange} {.smaller}

::::{.columns}
:::{.column width="50%"}

![](images/logo-r.png){.absolute top=100 left=150 width="15%" fig-alt="R logo"}
\
\
\
\

- Access to fundamental R operations
- Not aesthetically pleasing
    - In my opinion `r fontawesome::fa(name = "smile", a11y = "sem")`
- Faster for _very_ complex operations
    - Unlikely to matter for this course!

:::
:::{.column width="50%"}

![](images/logo-rstudio.png){.absolute top=100 left=580 width="35%" fig-alt="RStudio logo"}
\
\
\
\

- Access to fundamental R operations
- Allows custom aesthetics
- Has quality-of-life improvements
- Technically an "[IDE]{.orange}"
    - <u>I</u>ntegrated <u>D</u>eveloper <u>E</u>nvironment

:::
::::

## [RStudio Layout]{.orange} {.smaller}

- Layout consisting of four [panes]{.purple}
    - Each pane has [tabs]{.orange} that do different things
    - You can customize which tabs are in each pane!
- To customize options:
    - In top menu, click "Tools"
    - Select "Global Options"
    - Select "Pane Layout"
- I recommend the following layout:

![](images/rstudio-layout.png){.absolute top=260 left=600 width="40%" fig-alt="Image of four squares arranged in a 2x2 grid. The top left is titled 'source', the bottom left is titled 'console' and the two right squares are labeled 'your choice'"}

## [Practice: Choose Your Colors]{.pink}

- Tools `r fontawesome::fa("arrow-right", a11y = "sem")` Global Options `r fontawesome::fa("arrow-right", a11y = "sem")` Appearance 

\

- Look through some of the available color schemes
    - Feel free to share the name of your favorites!

\

. . . 

- Once you've picked one that you're happy with:
    - Click "OK" (in bottom left)

## [RStudio Projects]{.orange}

:::{.incremental}

- [Projects]{.purple} are a special way of marking a folder on your computer for R

\

- You can still use the folder for other stuff though!

\

- RStudio will give you benefits if you use Projects

:::

## [Why Use Projects?]{.orange} {.smaller}

- Sets default location for reading in / saving files
    - A.k.a. "importing" and "exporting" files

\

. . .

- Convenient separation among tasks you're working on!
    - RStudio 'remembers' which files are a part of each Project
    - Even re-opens whatever files you had opened last time you used the Project!

\

. . .

- Lowers risk of mixing up data / script files

## [Practice: Create a Project]{.pink} {.smaller}

1. Make an empty folder on your computer to make the Project in

\

2. In RStudio, click "Project: (None)" in the top right corner
    - "New Project..." `r fontawesome::fa("arrow-right", a11y = "sem")` "Existing Directory" `r fontawesome::fa("arrow-right", a11y = "sem")` "Browse..." `r fontawesome::fa("arrow-right", a11y = "sem")` find the folder you made in [step 1]{.pink}

\

3. If the name of the folder you made in [step 1]{.pink} shows up in the top right corner of RStudio, it worked!

## [Temperature Check]{.purple}

#### How are you Feeling?

<p align="center">
<img src="comics/debugging.png" alt="Comic-style graph depicting someone's emotional state as they debug code (from initial struggle and defeat to eventual triumph)">
</p>

## [R Scripts]{.orange} {.smaller}

- A code file is called a "script"
    - [Microsoft Word]{.orange} **:** [document]{.purple} -- [R]{.orange} **:** [script]{.purple}

\

. . .

- Lines of code written in scripts can be re-used
    - I.e., "[re-run]{.orange}"

\

. . .

- Scripts can be run line-by-line manually or run all at once
    - Running all at once = "[sourcing]{.orange}" a script

## [Practice: Create an R Script]{.pink} {.smaller}

- Create an R script
    - "File" `r fontawesome::fa("arrow-right", a11y="sem")` "New File" `r fontawesome::fa("arrow-right", a11y="sem")` "R Script"

\

- Once created, save it as "316_week1.R"
    - "File" `r fontawesome::fa("arrow-right", a11y="sem")` "Save"

\

- Note that the save location defaults to inside of your RStudio Project
    - Another reason to use Projects!


## [Base R Fundamentals]{.orange} {.smaller}

- "Base R" includes a set of core functions that are broadly useful
    - Reading in a CSV, taking an average, etc.

\

. . .

- R's real power comes from "[packages]{.purple}" with more advanced functions
    - These packages are _not_ in base R
    - We'll begin to cover these [next week]{.blue}

\

. . .

- Base R is really useful in its own right!

## [Objects and Assignment]{.orange} {.smaller}

- You can do math in R directly

\

. . .

- More useful to use "objects" instead of direct values
    - [object]{.purple} = alias for a value / set of values

\

. . .

- When we create an object we [assign]{.purple} some value(s) to the object
    - Uses the [assignment operator]{.orange} (`<-`)
    - Keyboard shortcut: Alt + hyphen

\

. . .

- After you create an object, you can use it in place of its value!

## [Object Example]{.gold}

We can make an object like so:

```{r object-example-p1}
#| echo: true
my_obj <- 52
```

\

. . . 

Then when we use the name of the object later...

```{r object-example-p2}
#| echo: true
my_obj
```

\

... we get the value we assigned to it!

## [Objects Continued]{.orange} {.smaller}

- Useful because it lets you _flexibly_ code 

\

. . .

- If you know that an object only contains numbers, you can do general operations that work for any number

\

. . .

- If you had to use the actual value every time, complex operations would be _brutal_ to code

## [Running Code]{.orange} {.smaller}

- How do you 'actually' run code?

\

- You have two options!
    1. Click the "Run" button in the top right of the "Source" pane of RStudio
    2. Use the keyboard shortcut Command + Return (or for Windows users, Control + Return)

\

- Note that either option requires that you clicked somewhere in the line you want to run
    - Lines are numbered on the left of the "Source" pane

## [Practice: Object Assignment]{.pink} {.smaller}

::::{.columns}
:::{.column width="50%"}

#### Arithmetic

:::
:::{.column width="50%"}

#### Object Practice

:::
::::

## [Practice: Object Assignment]{.pink} {.smaller}

::::{.columns}
:::{.column width="50%"}

#### Arithmetic

- Calculate 576 / 3

\

- Calculate (258 * 4) / 13

\

- Calculate 2 + 2 - 4

:::
:::{.column width="50%"}

#### Object Practice

:::
::::

## [Practice: Object Assignment]{.pink} {.smaller}

::::{.columns}
:::{.column width="50%"}

#### Arithmetic

- Calculate 576 / 3

\

- Calculate (258 * 4) / 13

\

- Calculate 2 + 2 - 4

:::
:::{.column width="50%"}

#### Object Practice

- Create an object called `yy` with a value of 55
    - _Hint_: remember to use the assignment operator (`<-`)

\

- Create an object called `my_char` with a value of "text"
    - What happens when you don't include quotation marks around "text"?

:::
::::

## [Temperature Check]{.purple}

#### How are you Feeling?

<p align="center">
<img src="comics/debugging.png" alt="Comic-style graph depicting someone's emotional state as they debug code (from initial struggle and defeat to eventual triumph)">
</p>

## [Code Comments]{.orange} {.smaller}

- Coding languages all allow [comments]{.purple}

\

. . .

- Comments are _non-coding_ lines that explain what the code is doing in a human-readable way

\

. . .

- In R, comment lines start with a hashtag (`#`)

\

. . .

- Comments allow others to read your code and understand what is happening
    - Great for <u>_future you</u>!!!_

## [Code Comments]{.orange}

<p align="center">
<img src="memes/comments.jpg" alt="Person applying clown makeup as they talk about why they don't need to use code comments" width="43%">
</p>

## [Code Example]{.gold}

Here are some example comments:

```{.r code-line-numbers="|1,4"}
# Make an object with a value of 77
q <- 77

# Divide it by 7 and assign to a new object
p <- q / 7
```

\

. . .

- Any questions about comments before we continue?

## [Practice: Comments]{.pink} {.smaller}

- Add a comment at the top of your script with the course number and your name

\

. . .

- For each line of code you wrote earlier:
    - Add a comment line _above it_ explaining what that line does
    - Use wording that makes sense to you!

\

. . .

- This lets your class notes be included directly with your code!
    - Though you're of course welcome to take notes (or not) using whatever medium you prefer

## [Functions]{.orange} {.smaller}

- Programming wouldn't be useful if you needed to do everything by hand

\

. . .

- Programming languages include [functions]{.purple} to avoid arithmetic
    - Someone else has done the manual labor and made an object **of that _process_**!

\

. . .

- You can then use the function instead of doing the math yourself

\

. . .

- Functions use [arguments]{.purple} to let users specify what they can modify

## [Function Example]{.gold} {.smaller}

- There is a function called `round` that rounds decimals either up or down

\

. . .

- `round` has two arguments:
    - `x` = the number(s) to round
    - `digits` = the number of digits to which to round `x`

\


. . .

- Let's look at an example

. . . 

```{r round-demo}
#| echo: true

# Round a decimal to 2 digits
round(x = 62.82379110, digits = 2)
```

## [Function Help]{.gold}

- Functions include help files built into R to help you use them!

\

. . .

- Can be accessed by typing a `?` and then the function name
    - E.g., `?mean`

\

. . . 

- Type (and run) `?round` and see what happens

## [Practice: Functions]{.pink} {.smaller}

- Base R includes an object called `pi` that includes the first 6 digits of π

\

. . .

- Using the `round` function, round `pi` to 3 digits

\

. . .

- Consult the help file for the square root function (`sqrt`)
    - What argument(s) does `sqrt` expect?

\

. . .

- What is the square root of pi?

\

. . .

- Don’t forget to add comments to each line in your script!

## [Vectors and Concatenation]{.orange} {.smaller}

- You can also make objects that contain several values
    - This type of object is called a [vector]{.purple}

\

. . .

- You can make vectors using "[concatenation]{.purple}"
    - \[con-CAT-eh-nation\]

\

. . .

- R does this with the `c` function
    - You need commas between each [element]{.orange} of a vector
    - E.g., `my_vector <- c(1, 2, 3, 4)`

## [Object Classes]{.orange} {.smaller}

- Objects have a [class]{.purple} that dictates what operations they support

\

. . .

- Math can only be done on "numeric" objects

\

. . .

- Text can be stored in "character" objects
    - But math can’t be done on characters!

\

. . .

- You can check an object's current class with the `class` function
    - E.g., `class(my_object)`

## [Object Classes Cont.]{.orange}

- There are _many_ classes
    - Most of which are beyond the scope of this class

\

. . .

- Let's focus on 3 fundamental classes
    1. [Numeric]{.purple} = numbers
    2. [Character]{.purple} = text
    3. [Factor]{.purple} = text but defines categorical groups

## [Class Coercion]{.orange} {.smaller}

- You can force (a.k.a. [coerce]{.purple}) an object from one class to another

\

. . .

- The simplest functions to do this are all `as.<desired class>()`
    - E.g., `as.numeric()`

\

. . .

- Want to have your code treat a number like text?
    - `my_text <- as.character(111)`

\

. . .

- What happens when you try to force text into a number?
    - `my_num <- as.numeric("hello")`

## [Practice: Concatenation & Classes]{.pink} {.smaller}

- Concatenate the numbers 1, 4, 9, and 6 into a vector
    - _Hint:_ remember the `c` function!

\

- What is the class of that vector?

\

. . .

- Concatenate "hello", "world", and the first vector into a _new_ vector
    - What is the class of the _new_ vector?

\

. . .

- Multiply the second vector by 16; what does this return?

## [Temperature Check]{.purple}

#### How are you Feeling?

<p align="center">
<img src="comics/debugging.png" alt="Comic-style graph depicting someone's emotional state as they debug code (from initial struggle and defeat to eventual triumph)">
</p>

## [Upcoming Due Dates]{.blue} {.smaller}

::::{.columns}
:::{.column width="50%"}

### Due before lecture

#### (By midnight)

- Homework \#1
- Read the British Ecological Society's [Reproducible Code Guide](https://www.britishecologicalsociety.org/wp-content/uploads/2017/12/guide-to-reproducible-code.pdf) (p.1-12)

:::
:::{.column width="50%"}

### Due before lab

#### (By midnight)

- Muddiest Point \#2
- Read the British Ecological Society's [Reproducible Code Guide](https://www.britishecologicalsociety.org/wp-content/uploads/2017/12/guide-to-reproducible-code.pdf) (p.20-25)

:::
::::
