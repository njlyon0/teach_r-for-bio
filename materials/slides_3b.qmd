---
title: "Intro to Data Science"
author: "Lab 3 -- Data Wrangling (P2)"
engine: knitr
format: 
  revealjs: 
    slide-number: c
    scrollable: false
    code-overflow: wrap
    code-line-numbers: false
    code-copy: hover
    theme: [night, slides.scss]
    reference-location: document
    footer: "[Programming in R for Biologists](https://njlyon0.github.io/teach_r-for-biologists/)"
---

## A Guide to Your Process

### [Scheduling]{.blue}

### [Learning Objectives]{.purple}

### [Practice]{.pink}

### [Supporting Information]{.orange}

### [Class Discussion]{.gold}

## [Today's Plan]{.blue}

- Muddiest Point Review
- Intro to the Pipe
- Groupwise Summarization with `dplyr`
- Reshaping Data with `tidyr`
- Discuss Function Tutorial Assignment

## [Today's Learning Objectives]{.purple}

After today's session you will be able to:

. . .

- Use the pipe operator in your code
- Perform group summarization with `dplyr` functions
- Reshape data from long to wide format
    - And vice versa

## [Muddiest Point Review]{.gold}

- Recurring topics from most recent MPs:

\

. . .

- What other topic(s) would you like to review?

## [Pipe Operator (`%>%`)]{.orange}

- Allows chaining together multiple operations

\

- Product of each function passed to next function
```{.r}
new_data <- old_data %>%
			function() %>%
			another_fxn() %>%
			etc()
```

\

- Same workflow requires fewer objects

## [Pipe Operator Example]{.orange} {.smaller}

### Without Pipe

```{.r}
# Load data
df_v1 <- read.csv("butterfly.csv")

# Subset to only one treatment
df_v2 <- filter(df_v1, treatment == "cows")

# Add together caterpillars and adult butterflies
df_v3 <- mutate(df_v2, monarch.tot = monarch.bfly + monarch.larva)

# Keep only the total monarch column
df_v4 <- select(df_v3, monarch)
```

## [Pipe Operator Example]{.orange} {.smaller}

### Without Pipe

```{.r}
# Load data
df_v1 <- read.csv("butterfly.csv")

# Subset to only one treatment
df_v2 <- filter(df_v1, treatment == "cows")

# Add together caterpillars and adult butterflies
df_v3 <- mutate(df_v2, monarch.tot = monarch.bfly + monarch.larva)

# Keep only the total monarch column
df_v4 <- select(df_v3, monarch)
```

### With Pipe

```{.r}
# Load data
df_v1 <- read.csv("butterfly.csv")

# Do all needed wrangling
df_done <- df_v1 %>%
      # Subset to only one treatment
      filter(treatment == "cows") %>%
      # Add together caterpillars and adult butterflies
      mutate(monarch.tot = monarch.bfly + monarch.larva) %>% 
      # Keep only the total monarch column
      select(df_v3, monarch)
```

## [Why Named "Pipe"?]{.orange}

René Magritte -- _The Treachery of Images_ (1929)

![](images/magritte-profile.jpg){.absolute top=150 left=50 width="30%"}

![](images/magritte-treachery.jpg){.absolute top=150 left=450 width="60%"}
![](images/hex-magrittr.png){.fragment .fade-in .absolute top=475 left=120 width="18%"}

## [Practice: Pipe]{.pink} {.smaller}

![](images/hex-magrittr.png){.absolute top=0 left=1100 width="12%"}

1. Install and load the `magrittr` package

\

2. Return to your 3-step wrangling of "minnow.csv" from [Lecture \#3]{.gold}
    - Filter "minnow.csv" to only Stonerollers and Chubs
    - Convert depth & diameter to meters (from cm)
    - Pare down columns to only species and depth/diameter in meters

\

3. Copy these lines and edit them to use the `%>%`
    - Does this have the same end result as the non-pipe lines?

## [Groupwise Summarization]{.orange} {.smaller}

- Summarizing within groups is a _common_ operation
    - **Average** barnacle number at several tidal heights
    - **Variation** in reported customer satisfaction within demographic groups

\

. . . 

- `dplyr` offers three functions to accomplish this
    1. `group_by`
    2. `summarize`
    3. `ungroup`

## [Summarization Syntax]{.orange}

- `group_by` has similar structure to `select`
    - Wants column names separated by commas

\

. . . 

- `summarize` has similar structure to `mutate`
    - E.g., `new_column = function(old_column)`

\

. . . 

- `ungroup` has _no_ arguments!

## [Summarization + Pipes]{.orange}

Let's check out an example:

\

```{.r code-line-numbers="|4|6,7|9"}
# Take data
data %>%
    # 1. Group by treatment
    group_by(treatment) %>%
    # 2. Calculate average and deviation
    summarize(mean_val = mean(response),
              sd_val = sd(response)) %>%
    # 3. Ungroup
    ungroup()
```

## [Summarization Warnings]{.orange} {.smaller}

1. Summarizing simplifies dataframes!
    - After summarizing, you'll have _one_ row per <u>combination</u> of grouping columns

\

. . . 

2. Summarizing drops columns _unless_:
    1. Column is named in `group_by`
    2. Column is created by `summarize`

\

- If you don't want to lose a column, it needs to meet one of those criteria

## [Relevant Helper Functions]{.orange} {.smaller}

- To summarize you'll need to use functions that calculate summary values

\

. . . 

- Take an average with `mean`
    - Has `na.rm` argument that determines whether missing values are included

\

. . .

- Find standard deviation with `sd`
    - Common measurement to use as error bars in a graph

\

. . .

- Find the smallest or largest number with `min` and `max`

## [Practice: Summarizing]{.orange} {.smaller}

![](images/hex-magrittr.png){.absolute top=0 left=1100 width="12%"}
![](images/hex-tidyr.png){.absolute top=0 left=965 width="12%"}
![](images/hex-penguins.png){.absolute top=0 left=830 width="12%"}
- Load the `palmerpenguins`, `tidyr`, and `magrittr` packages

\

- Using the "penguins" data in the `palmerpenguins` package, answer the following questions:

\

. . .

1. What is the average bill length in millimeters for each species of penguin?

. . .

2. Which island has the smallest individual penguin?
    - _Hint:_ use body mass

. . . 

3. Which species <u>at which island</u> has the longest flippers for female penguins?
    - Hint: remember you can use `filter` before or after `summarize`!

## [Temperature Check]{.purple}

#### How are you Feeling?

<p align="center">
<img src="comics/debugging.png" alt="Comic-style graph depicting someone's emotional state as they debug code (from initial struggle and defeat to eventual triumph)">
</p>

## [Data "Shape"]{.orange}



## [Reshaping Longer]{.orange}



## [Reshaping Longer Continued]{.orange}



## [Reshaping Longer Visual]{.orange}


## [Practice: `pivot_longer`]{.pink}

![](images/hex-tidyr.png){.absolute top=0 left=1100 width="12%"}


## [Reshaping Wider]{.orange}



## [Reshaping Wider Continued]{.orange}



## [Reshaping Wider Visual]{.orange}


## [Practice: `pivot_wider`]{.pink}

![](images/hex-tidyr.png){.absolute top=0 left=1100 width="12%"}




## [Temperature Check]{.purple}

#### How are you Feeling?

<p align="center">
<img src="comics/debugging.png" alt="Comic-style graph depicting someone's emotional state as they debug code (from initial struggle and defeat to eventual triumph)">
</p>

## [Function Tutorial: Learning Objectives]{.orange}

After completing this assignment you will be able to:

. . .

- Explain the proper syntax and use of R functions
- Communicate effectively to an audience of interested non-specialists
- Apply feedback on an assignment to a successful revision
- Reflect on the process of revising a presentation based on constructively critical feedback

## [Function Tutorial: FAQ]{.orange} {.smaller}

- Tutorial should be an R Markdown with plain text and code chunks
    - Write tutorials for your classmates for three functions from packages on CRAN

\

. . .

- You’ll present your tutorials for 5-10 minutes in [Lab \#5]{.blue}
    - Get peer feedback then & implement changes before submitting draft 2

\

. . . 

- Submit & present revised tutorials during [Lab \#7]{.pink}

## [Function Tutorial: Points]{.orange} {.smaller}

- **Draft 1 = 30 pts (12% course grade)**
    - Overall report – 6 pts
    - Function tutorial (x3) – 8 pts each

. . . 

- **Draft 2 = 40 pts (16% of grade)**
    - Overall report – 6 pts
    - Function tutorial (x3) – 8 pts each
    - Revision response – 3 pts
    - Edited from draft 1 from peer feedback – 7 pts

. . . 

- [**_Optional_**]{.gold} Draft 3 = 40 pts
    - If submitted, score replaces draft 2
    - <u>Score can only improve</u> (no way draft 3 reduces total points earned)

## [Picking Functions]{.orange} {.smaller}

- Everyone must pick three _different_ functions
    - This way no two people present tutorials on the same function

- Unfortunately, means if someone picks before you they "claim" that function

. . .

\

- My plan to do this equitably is as follows:
    1. Randomize student order and each person picks one function
    2. Second function picked in reverse of that order (I.e., if you were last to pick in round 1, you're first in round 2)
    3. Re-randomize student order for third function

\

- Sound fair? If not, what’s a good alternative?

## [Nick's _Recommended_ Packages]{.orange}


## [Forbidden Packages (Sorry!)]{.orange}



## [Assignment Q & A]{.gold}

- What questions do you have about this assignment?
    - No "dumb" questions so ask away!

\

. . .

- Feeling good about next steps?


## [Exploring CRAN Packages]{.orange} {.smaller}

- Visit [cran.r-project.org](https://cran.r-project.org/)

\

- Click "Packages" on the left sidebar
    - Approx. 2/3 down sidebar items

\

- Click "Table of available packages, sorted by name"

\

- Scroll through and look for one with a cool name / title!

## [Practice: Exploring CRAN]{.pink}

- Explore available packages / functions

\

- Select 7-10 functions so you have alternates (if needed)

\

- We will pick functions during next lecture ([Lecture \#4]{.blue})

## [Temperature Check]{.purple}

#### How are you Feeling?

<p align="center">
<img src="comics/debugging.png" alt="Comic-style graph depicting someone's emotional state as they debug code (from initial struggle and defeat to eventual triumph)">
</p>

## [Upcoming Due Dates]{.blue} {.smaller}

::::{.columns}

:::{.column width="50%"}

### Due before lecture

#### (By midnight)

- Homework \#3
- Pick 7-10 possible functions for Function Tutorial assignment
    - Remember, they **_must_** be from CRAN packages!


:::

:::{.column width="50%"}

### Due before lab

#### (By midnight)

- Muddiest Point \#4

:::

::::

