---
title: "Intro to Data Science"
author: "Lab 3 -- Data Wrangling (P2)"
engine: knitr
format: 
  revealjs: 
    slide-number: c
    scrollable: false
    code-overflow: wrap
    code-line-numbers: false
    code-copy: hover
    theme: [night, slides.scss]
    reference-location: document
    footer: "[Programming in R for Biologists](https://njlyon0.github.io/teach_r-for-biologists/)"
---

## A Guide to Your Process

### [Scheduling]{.blue}

### [Learning Objectives]{.purple}

### [Practice]{.pink}

### [Supporting Information]{.orange}

### [Class Discussion]{.gold}

## [Today's Plan]{.blue}

- Muddiest Point Review
- Intro to the Pipe
- Groupwise Summarization with `dplyr`
- Discuss Function Tutorial Assignment

## [Today's Learning Objectives]{.purple}

After today's session you will be able to:

. . .

- Use the pipe operator in your code
- Perform group summarization with `dplyr` functions

## [Muddiest Point Review]{.gold}

- Recurring topics from most recent MPs:

\

. . .

- What other topic(s) would you like to review?

## [Pipe Operator (`%>%`)]{.orange}

- Allows chaining together multiple operations

\

. . . 

- Product of each function passed to next function
```{.r}
new_data <- old_data %>%
			function() %>%
			another_fxn() %>%
			etc()
```

\

. . . 

- Same workflow requires fewer objects

## [Pipe Operator Example]{.orange} {.smaller}

### Without Pipe

```{.r}
# Load data
df_v1 <- read.csv("butterfly.csv")

# Subset to only one treatment
df_v2 <- filter(df_v1, treatment == "cows")

# Add together caterpillars and adult butterflies
df_v3 <- mutate(df_v2, monarch.tot = monarch.bfly + monarch.larva)

# Keep only the total monarch column
df_v4 <- select(df_v3, monarch.tot)
```

## [Pipe Operator Example]{.orange} {.smaller}

### Without Pipe

```{.r}
# Load data
df_v1 <- read.csv("butterfly.csv")

# Subset to only one treatment
df_v2 <- filter(df_v1, treatment == "cows")

# Add together caterpillars and adult butterflies
df_v3 <- mutate(df_v2, monarch.tot = monarch.bfly + monarch.larva)

# Keep only the total monarch column
df_v4 <- select(df_v3, monarch.tot)
```

### With Pipe

```{.r}
# Load data
df_v1 <- read.csv("butterfly.csv")

# Do all needed wrangling
df_done <- df_v1 %>%
      # Subset to only one treatment
      filter(treatment == "cows") %>%
      # Add together caterpillars and adult butterflies
      mutate(monarch.tot = monarch.bfly + monarch.larva) %>% 
      # Keep only the total monarch column
      select(monarch.tot)
```

## [Why Named "Pipe"?]{.orange}

René Magritte -- _The Treachery of Images_ (1929)

![](images/magritte-profile.jpg){.absolute top=150 left=50 width="30%" fig-alt="photo of Rene Magritte"}

![](images/magritte-treachery.jpg){.absolute top=150 left=450 width="60%" fig-alt="copy of 'the treachery of images', a famous painting of a pipe with the words 'this is not a pipe' written in French beneath the image"}
![](images/hex-magrittr.png){.fragment .fade-in .absolute top=475 left=120 width="18%" fig-alt="hex logo for magrittr R package"}

## [Practice: Pipe]{.pink} {.smaller}

![](images/hex-magrittr.png){.absolute top=0 left=1100 width="12%" fig-alt="hex logo for magrittr R package"}

1. Install and load the `magrittr` package

\

. . .

2. Return to your 3-step wrangling of "minnow.csv" from [Lecture \#3]{.blue}
    - Filter "minnow.csv" to only Stonerollers and Chubs
    - Convert depth & diameter to meters (from cm)
    - Pare down columns to only species and depth/diameter in meters

\

. . .

3. Copy these lines and edit them to use the `%>%`
    - Does this have the same end result as the non-pipe lines?

## [Groupwise Summarization]{.orange} {.smaller}

- Summarizing within groups is a _common_ operation
    - **Average** barnacle number at several tidal heights
    - **Variation** in reported customer satisfaction within demographic groups

\

. . . 

- `dplyr` offers three functions to accomplish this
    1. `group_by`
    2. `summarize`
    3. `ungroup`

## [Summarization Syntax]{.orange}

- `group_by` has similar structure to `select`
    - Wants column names separated by commas

\

. . . 

- `summarize` has similar structure to `mutate`
    - E.g., `new_column = function(old_column)`

\

. . . 

- `ungroup` has _no_ arguments!

## [Relevant Helper Functions]{.orange} {.smaller}

- To summarize you'll need to use functions that calculate summary values

\

. . . 

- Take an average with `mean`
    - Has `na.rm` argument that determines whether missing values are included

\

. . .

- Find standard deviation with `sd`
    - Common measurement to use as error bars in a graph

\

. . .

- Find the smallest or largest number with `min` and `max`

## [Summarization + Pipes]{.orange}

Let's check out an example:

\

```{.r code-line-numbers="|4|6,7|9"}
# Take data
data %>%
    # 1. Group by treatment
    group_by(treatment) %>%
    # 2. Calculate average and standard deviation
    summarize(mean_val = mean(response, na.rm = TRUE),
              sd_val = sd(response, na.rm = TRUE)) %>%
    # 3. Ungroup
    ungroup()
```

## [Summarization Warnings]{.orange} {.smaller}

1. Summarizing simplifies dataframes!
    - After summarizing, you'll have _one_ row per <u>combination</u> of grouping columns

\

. . . 

2. [Summarizing drops columns]{.purple} _unless_:
    1. Column is named in `group_by`
    2. Column is created by `summarize`

\

- If you don't want to lose a column, it needs to meet one of those criteria

## [Practice: Summarizing]{.pink} {.smaller}

![](images/hex-magrittr.png){.absolute top=0 left=1100 width="12%" fig-alt="hex logo for magrittr R package"}
![](images/hex-dplyr.png){.absolute top=0 left=965 width="12%" fig-alt="hex logo for dplyr R package"}
![](images/hex-penguins.png){.absolute top=115 left=1032 width="12%" fig-alt="hex logo for palmerpenguins R package"}

- Using the "penguins" data in the `palmerpenguins` package, answer the following questions:

\

. . .

1. What is the average bill length in millimeters for each species of penguin?

. . .

2. Which island has the smallest individual penguin?
    - _Hint:_ use body mass

. . . 

3. Which species <u>at which island</u> has the longest flippers for female penguins?
    - Hint: remember you can use `filter` before or after `summarize`!

## [Temperature Check]{.purple}

#### How are you Feeling?

<p align="center">
<img src="comics/debugging.png" alt="Comic-style graph depicting someone's emotional state as they debug code (from initial struggle and defeat to eventual triumph)">
</p>

## [Function Tutorial: Learning Objectives]{.purple} {.smaller}

After completing this assignment you will be able to:

\

. . .

- Explain the proper syntax and use of R functions
- Communicate effectively to an audience of interested non-specialists
- Apply feedback on an assignment to a successful revision
- Reflect on the process of revising a presentation based on constructively critical feedback

## [Function Tutorial: FAQ]{.orange} {.smaller}

- Tutorial should be an R Markdown with plain text and code chunks
    - Write tutorials for your classmates for three functions from packages on CRAN

\

. . .

- You'll present your tutorials for 5-10 minutes in [Lab \#5]{.blue}
    - Get peer feedback then & implement changes before submitting draft 2

\

. . . 

- Submit & present revised tutorials during [Lab \#7]{.blue}

## [Function Tutorial: Points]{.orange} {.smaller}

- **Draft 1 = 30 pts (12% course grade)**
    - Overall report – 6 pts
    - Function tutorial (x3) – 8 pts each

. . . 

- **Draft 2 = 40 pts (16% of grade)**
    - Overall report – 6 pts
    - Function tutorial (x3) – 8 pts each
    - Revision response – 3 pts
    - Edited from draft 1 from peer feedback – 7 pts

. . . 

- [**_Optional_**]{.gold} Draft 3 = 40 pts
    - If submitted, score replaces draft 2
    - <u>Score can only improve</u> (no way draft 3 reduces total points earned)

## [Picking Functions]{.orange} {.smaller}

- Everyone must pick three _different_ functions
    - This way no two people present tutorials on the same function
    - Unfortunately, means if someone picks before you they "claim" that function

. . .

\

- My plan to do this equitably is as follows:
    1. Randomize student order and each person picks one function
    2. Second function picked in reverse of that order (I.e., if you were last to pick in round 1, you're first in round 2)
    3. Re-randomize student order for third function

\

. . .

- Sound fair? If not, what’s a good alternative?

## [Nick's _Recommended_ Packages]{.orange} {.smaller}

::::{.columns}
:::{.column width="50%"}

![](images/hex-stringr.png){.absolute top=60 left=-150 width="12%" fig-alt="hex logo for the stringr R package"}
![](images/hex-dndr.png){.absolute top=255 left=-150 width="12%" fig-alt="hex logo for the dndR R package"}
![](images/hex-lterpalettefinder.png){.absolute top=450 left=-150 width="12%" fig-alt="hex logo for the lterpalettefinder R package"}

`stringr` -- Simple, Consistent Wrappers for Common String Operations

\
\

`dndR` -- Dungeons & Dragons Functions for Players and Dungeon Masters

\
\

`lterpalettefinder` -- Extract Color Palettes from Photos and Pick Official LTER Palettes

:::
:::{.column width="50%"}

![](images/hex-supportr.png){.absolute top=60 left=1050 width="12%" fig-alt="hex logo for the supportR R package"}
![](images/hex-vegan.png){.absolute top=255 left=1050 width="12%" fig-alt="hex logo for the vegan R package"}

`supportR` -- Support Functions for Wrangling and Visualization

\
\
\

`vegan` -- Community Ecology Package

:::
::::

## [Forbidden Packages (Sorry!)]{.orange} {.smaller}

![](images/hex-dplyr.png){.absolute top=60 left=-150 width="12%" fig-alt="hex logo for the dplyr R package"}
![](images/hex-tidyr.png){.absolute top=255 left=-150 width="12%" fig-alt="hex logo for the tidyr R package"}
![](images/hex-ggplot2.png){.absolute top=520 left=-150 width="12%" fig-alt="hex logo for the ggplot2 R package"}

- `dplyr` -- A Grammar of Data Manipulation
    - [Reason:]{.gold} we cover a lot of this in class

\

- `tidyr` -- Tidy Messy Data
    - Actually [only 2 forbidden functions:]{.gold} `pivot_longer` & `pivot_wider`
    - Others are okay to use!
    - [Reason:]{.gold} we _just_ covered both in class

\

- `ggplot2` -- Create Elegant Data Visualizations Using the Grammar of Graphics
    - [Reason:]{.gold} we cover a lot of this in class (see [week 6]{.blue}) **and** its functions use a really different syntax from what is used by other packages

## [Assignment Q & A]{.gold} {.smaller}

- What questions do you have about this assignment?
    - No such thing as a "dumb" question, so ask away!

\

. . .

- Feeling good about next steps?


## [Exploring CRAN Packages]{.orange} {.smaller}

- Visit [cran.r-project.org](https://cran.r-project.org/)

\

- Click "Packages" on the left sidebar
    - Approx. 2/3 down sidebar items

\

- Click "Table of available packages, sorted by name"

\

- Scroll through and look for one with a cool name / title!

## [Practice: Exploring CRAN]{.pink}

- Explore available packages / functions

\

- Select 7-10 functions so you have alternates (if needed)

\

- We will pick functions during next lecture ([Lecture \#4]{.blue})

## [Temperature Check]{.purple}

#### How are you Feeling?

<p align="center">
<img src="comics/debugging.png" alt="Comic-style graph depicting someone's emotional state as they debug code (from initial struggle and defeat to eventual triumph)">
</p>

## [Upcoming Due Dates]{.blue} {.smaller}

::::{.columns}
:::{.column width="50%"}

### Due before lecture

#### (By midnight)

- Homework \#3
- Pick 7-10 possible functions for Function Tutorial assignment
    - Remember, they **_must_** be from CRAN packages!


:::
:::{.column width="50%"}

### Due before lab

#### (By midnight)

- Muddiest Point \#4

:::
::::

# [Bonus: Data Shape]{.orange}

## [Bonus Learning Objectives]{.purple}

After this bonus session you will be able to:

. . .

- Reshape data from long to wide format
    - And vice versa

## [Data "Shape"]{.orange} {.smaller}

- Data with rows/columns has a [shape]{.purple}
    - Shape refers to whether _observations_ are in the rows or the columns

\

. . .

- "Wide" data has observations as _columns_
    - E.g., Each column is a different species' count

\

. . .

- "Long" data has observations as _rows_
    - E.g., The columns are "species" and "count"

## [Data Shape Visual]{.orange}

\

::::{.columns}
:::{.column width="60%"}

### Long Data

:::
:::{.column width="10%"}
:::
:::{.column width="30%"}

### Wide Data

:::
::::

![](images/shape-long.png){.fragment .fade-in .absolute top=200 left=-50 width="40%" fig-alt="Cartoon of a long table of data where there is a column with either fire or cow emojis, a column with one of three different butterfly emojis, and a third column with just '#' signs in every row"}

![](images/shape-wide.png){.fragment .fade-in .absolute top=325 left=650 width="50%" fig-alt="Cartoon of a wide table of data where there is one row for cows and one row for fire and the columns are dedicated to each of the three butterfly types"}

![](images/shape-arrows.png){.fragment .fade-in .absolute top=325 left=400 width="20%" fig-alt="Two arrows--one facing left and the other right--between the two tables. The arrow point from wide to long is labeled 'pivot longer' and the opposite arrow is labeled 'pivot wider'"}

## [Reshaping Longer]{.orange} {.smaller}

- Change _from_ wide _to_ long format with `tidyr::pivot_longer`
    - Has 4 key arguments

\

. . . 

1. `data` = the wide data to pivot


\

. . .

2. `cols` = the columns to pivot
    - Can select which columns to pivot _OR_ which to **not**
    - Include: `cols = colD:colX`
    - Exclude: `cols = -colA:-colC`

## [Reshaping Longer Continued]{.orange} {.smaller}

3. `names_to` = name of new column to hold old column names
    - Must be in quotes

\

. . .

4. `values_to` = name of new column to hold _values_
    - Also in quotes

\

. . .

- Example (for syntax):
```{.r}
df_long <- pivot_longer(data = my_df,
                        columns = hydrogen:uranium,
                        names_to = "element",
                        values_to = "measurement")
```

## [Reshaping Longer Visual]{.orange}

<p align="center">
<img src="images/graphic-pivot-longer.png" alt="Diagram showing how the 'tidyr' package allows users to pivot data into long format (from wide format) using the 'pivot_longer' function" width="120%">
</p>

## [Practice: `pivot_longer`]{.pink} {.smaller}

![](images/hex-tidyr.png){.absolute top=0 left=1100 width="12%" fig-alt="hex logo for the tidyr R package"}

1. Download the "bees.csv" and load it into R with `read.csv`
    - Check its structure! What columns are there?

\

. . .

2. Pivot the data so that you are left with three columns:
    - "year", "bee_group", and "bee_abundance"

\

. . . 

3. Check your work! What are the dimensions of the resulting dataframe?

. . . 

- Should be 32 rows by 3 columns


## [Reshaping Wider]{.orange} {.smaller}

- Change _from_ long _to_ wide format with `tidyr::pivot_wider`
    - Also has 4 key arguments

\

. . . 

1. `data` = the wide data to pivot


\

. . .

2. `names_from` = name of the column to turn into new column names
    - Must be <u>unquoted</u>

## [Reshaping Wider Continued]{.orange} {.smaller}

3. `values_from` = name of column to make into new column values
    - Also <u>unquoted</u>

\

. . .

4. `values_fill` = value to fill if value is missing in original data
    - Technically optional but good practice to include explicitly

\

. . .

- Example:
```{.r}
df_wide <- pivot_wider(data = my_df,
                       names_from = "fruit",
                       values_from = "size",
                       values_fill = NA)
```

## [Reshaping Wider Visual]{.orange}

<p align="center">
<img src="images/graphic-pivot-wider.png" alt="Diagram showing how the 'tidyr' package allows users to pivot data into wide format (from long format) using the 'pivot_wider' function" width="120%">
</p>

## [Practice: `pivot_wider`]{.pink}

![](images/hex-tidyr.png){.absolute top=0 left=1100 width="12%" fig-alt="hex logo for the tidyr R package"}

1. Take the data object you pivoted to long format in the prior practice block

\

. . . 

2. Pivot it back to wide format with `pivot_wider`!

\

. . . 

3. Check your work!
    - Does it look like the original object you loaded with `read.csv`?

## [Practice: Wrangling!]{.pink} {.smaller}

![](images/hex-magrittr.png){.absolute top=0 left=1100 width="12%" fig-alt="hex logo for the magrittr R package"}
![](images/hex-tidyr.png){.absolute top=0 left=965 width="12%" fig-alt="hex logo for the tidyr R package"}
![](images/hex-dplyr.png){.absolute top=115 left=1032 width="12%" fig-alt="hex logo for the dplyr R package"}
![](images/hex-penguins.png){.absolute top=115 left=897 width="12%" fig-alt="hex logo for the palmerpenguins R package"}

- Beginning with the "penguins" data do the following operations:

. . .

1. Keep only data on female penguins
    - No male penguins and no individuals where sex is not known

. . .

2. Calculate average bill depth within species **and** island

. . .

3. Reshape _to_ wide format so that each island is a column
    - Note that if an island doesn't have a given species it should have `NA` (not `0`)

. . .

4. Check your work! What are the dimensions of the resulting dataframe?

. . . 

- Should be 6 rows by 5 columns

