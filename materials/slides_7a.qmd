---
title: "Intro to Data Science"
author: "Lecture 7 -- Code Iteration"
engine: knitr
format: 
  revealjs: 
    slide-number: c
    scrollable: false
    code-overflow: wrap
    code-line-numbers: false
    code-copy: hover
    theme: [night, slides.scss]
    reference-location: document
    footer: "[Programming in R for Biologists](https://njlyon0.github.io/teach_r-for-biologists/)"
---

## A Guide to Your Process

### [Scheduling]{.blue}

### [Learning Objectives]{.purple}

### [Practice]{.pink}

### [Supporting Information]{.orange}

### [Class Discussion]{.gold}

## [Today's Plan]{.blue}

- Code Iteration with Loops
- Conditionals in Loops
- In-Class Free Work

## [Today's Learning Objectives]{.purple}

After today's session you will be able to:

. . .

- Describe the contexts where iteration is useful
- Apply loops to small arithmetic problems
- Create a loop with a conditional

## [Repeated Operations]{.orange} {.smaller}

- Often we want to repeat a given operation multiple times
    - I.e., repeat _iteratively_

\

. . . 

- Could just copy/paste our code for each iteration
    - Labor intensive & inefficient & ugly (IMO)

\

. . . 

- Copy/pasting fails if you need to do something _many_ times
    - [Code iteration]{.purple} is our solution to these types of problems!

## [Code Iteration]{.orange} {.smaller}

- Iteration process:
    1. Define the operation that you want to repeat
    2. Define the values to be passed through that operation
    3. Press "go" and sit back while the code does the work!

\

. . . 

- Benefits:
    - Much faster than copy/pasting code
    - Code is more human-readable / navigable
    - Allows you to do something else while the code iterates itself!

\

. . . 

- This method is called a "[for loop]{.purple}"

## [Loop Syntax]{.orange} {.smaller}

- For loops repeat an operation for each value given to them

\

. . .

- Fundamental syntax is as follows:
```{.r}
# Start of loop
for ( index in vector ) {

    # Actual operation of loop
    function(index) 

} # End of loop
```

\

. . .

- More info:
    - [index]{.purple} = placeholder for one value in vector
    - [vector]{.purple} = set of values to pass through loop
    - [curly braces]{.purple} (`{`/`}`) to define start/end

## [Loop Example]{.orange} {.smaller}

- Let's check out an example loop to get more comfortable with these!

\

- Square each integer between 1 and 5
```{r ex-loop-1}
#| echo: true
#| code-line-numbers: "|2|5|8|10"

# Loop across vector of numbers
for(k in 1:5){
  
  # Square that number
  square_k <- k * k
  
  # Print that result
  print(square_k)
  
}
```

## [Loop Practice]{.pink} {.smaller}

- Make a vector of numbers between 5 and 25

\

- Write a for loop that:
    - 1. Takes the square root of each number (see `?sqrt`)
    - 2. Prints that result (use `print` function)

## [Loop Practice (Answer)]{.pink}

- Demonstrating on only a few numbers

```{r practice-answer-1}
#| echo: true

# Define loop
for(j in 5:8){
  
  # Take square root
  j_root <- sqrt(x = j)
  
  # Print that result
  print(x = j_root)
  
} # Close loop
```



## [More Loop Practice]{.pink} {.smaller}

- Write a second loop that:
    1. multiplies each number by 32
    2. Prints the result in the console

\

. . .

- Answer:
```{.r}
for(i in 5:25){
  i_mult <- i * 32
  print(i_mult)
}
```

## [Temperature Check]{.purple}

#### How are you Feeling?

<p align="center">
<img src="comics/debugging.png" alt="Comic-style graph depicting someone's emotional state as they debug code (from initial struggle and defeat to eventual triumph)">
</p>

## [Messaging with R]{.orange} {.smaller}

- By default, loops don't put stuff in the Console
    - This can make figuring out what is going on difficult

\

. . .

- Fortunately, R contains functions for putting text into the Console
    - `print` is the one we'll focus on!

\

. . .

- However, `print` only accepts one vector at a time

\

. . .

- `paste` makes multiple vectors into one vector

## [`print` + `paste`]{.orange} {.smaller}

- We can combine `print` and `paste` to assemble informative messages!

\

. . .

- For example:
```{r ex-print-paste}
#| echo: true

# Use `paste` to combine multiple vectors
text <- paste("Hello", "my", "name", "is", "Nick")

# Then give that to `print` to return!
print(text)
```

\

. . .

- This can be used in a loop to create messages that change with each iteration!

## [Message Example]{.orange} {.smaller}

- Let's consider an example of a loop that uses `print` and `paste` to make messages

\

. . . 

- For instance:
```{r ex-loop-2}
#| echo: true
#| code-line-numbers: "|8"

# Loop across vector of numbers
for(k in 1:5){
  
  # Square that number
  square_k <- k * k
  
  # Print a message about that result
  print(paste("The square of", k, "is", square_k))

}
```

## [Write Messages]{.pink} {.smaller}

- We'll modify your earlier practice loops to make informative messages!

\

. . .

- For the loop with `j` as the index:
    - Make the `print` step tell you the starting number and its square root

\

. . . 

- Answer:
```{.r}
for(j in 5:25){
  j_root <- sqrt(j)
  print(paste("The square root of", j, "is", j_root))
}
```

## [More Message Practice]{.pink} {.smaller}

- For the loop with `i` as the index:
    - Write a message that says each number and what it times 32 is equal to

\

. . .

- Answer:
```{.r}
for(i in 5:25){
  i_mult <- i * 32
  print(paste(i, "times 32 is equal to", i_mult))
}
```

## [Conditionals]{.orange} {.smaller}

- You can write code to do something _only_ if some condition is met
    - Do this by using conditionals!

\

. . .

- Syntax is similar to logical statements for subsetting
    - Recall our earlier conversations about conditional operators:
    - `==`, `&`, `>`, etc.

\

. . .

- Two main conditional functions: `if` & `else`

## [Conditional Example]{.orange}

```{r demo-conditional}
#| echo: true

# Do something if a condition is met
if(2 == 2){

  print("Math is mathing!")

  # If that condition is not met...
} else { 
  
  print("Math is--somehow--not mathing...")

}
```

## [Conditional Syntax]{.orange} {.smaller}

- `if` wants:
    - Condition to check in parentheses `(...)`
    - What to do if the condition **_is_** met in curly braces `{...}`

\

. . . 

- `else` wants:
    - Only curly braces `{...}` bits
    - Can only be used if `if` is used first

## [Multiple `if`s]{.orange} {.smaller}

- The example in the previous slide is just for one `if`
    - Essentially '[either this or that]{.purple}'

\

. . .

- You can add multiple conditions if desired!
```{.r}
# If the number is less than 0
if(x < 0){
  print("Number is negative")

# If it's more than 0
else if(x > 0){
  print("Number is positive")

# Otherwise ...
} else { print("Number is zero") }
```
- See how the second condition uses `else if(...){...}`?

## [Conditionals in Loops]{.orange} {.smaller}

- You can use conditionals to make one loop handle _multiple_ possibilities

\

. . . 

- For example:
```{r ex-loop-3}
#| echo: true
#| code-line-numbers: "|8|9|12|13"

# Test vector
my_vec <- c(-10, -9, -8, 0, 4, 5, 6)

# Loop across it
for(value in my_vec){
  
  # Make negative numbers positive
  if(value < 0){ 
    print(value * -1)
    
    # Take the square root of positive numbers
  } else if(value > 0){
      print(sqrt(value)) }
  
} # Close loop curly brace
```

## [Loop Conditional Visual]{.orange} {.smaller}

<p align="center">
<img src="comics/loop-conditionals.jpg" alt="Comic showing a loop across a set of monster shapes where triangle creatures get sunglasses but non-triangles get a hat because of an 'if' and 'else' use in the loop" width="80%">
</p>

## [Loops with Conditionals]{.pink} {.smaller}

- Write a loop that:
    - Uses `g` as the index
    - Uses a vector that has all the integers between 10 and 20
    - Prints each value in the vector

\

. . .

- Add two conditionals to that loop:
    1. If `g` is less than 14, `print` "Less than 14"
    2. Otherwise, `print` the value as-is

## [Temperature Check]{.purple}

#### How are you Feeling?

<p align="center">
<img src="comics/debugging.png" alt="Comic-style graph depicting someone's emotional state as they debug code (from initial struggle and defeat to eventual triumph)">
</p>

## [In-Class Free Work]{.gold} {.smaller}

- Draft 2 of Function Tutorials is due next week!
    - Presentations during [Lecture \#8]{.blue}
    - Requires 'revision response' where you discuss what changes you made due to feedback

\

. . . 

- GitHub Presence is due next week
    - You have most of what you need for full points on that already

\

. . . 

- Any questions about upcoming assignments / past topics?
    - I _strongly_ recommend taking advantage of this time!

## [Upcoming Due Dates]{.blue} {.smaller}

::::{.columns}
:::{.column width="50%"}

### Due before lecture

#### (By midnight)

- Homework \#7
- Submit [Draft 2]{.blue} of Function Tutorials
    - Double check rubric to see that you're not leaving any points on the table!
    - Remember to also <u>submit the Revision Response</u>

:::
:::{.column width="50%"}

### Due before lab

#### (By midnight)

- Homework \#8
- Muddiest Point \#8
- GitHub Presence

:::
::::
