---
title: "Intro to Data Science"
author: "Lab 2 -- Conditionals & Version Control"
engine: knitr
format: 
  revealjs: 
    slide-number: c
    scrollable: false
    code-overflow: wrap
    code-line-numbers: false
    code-copy: hover
    theme: [night, slides.scss]
    reference-location: document
    footer: "[Programming in R for Biologists](https://njlyon0.github.io/teach_r-for-biologists/)"
---

## A Guide to Your Process

### [Scheduling]{.blue}

### [Learning Objectives]{.purple}

### [Practice]{.pink}

### [Supporting Information]{.orange}

### [Class Discussion]{.gold}

## [Today's Plan]{.blue}

- Muddiest Point Review
- Conditionals
- Version Control Background
- Navigating GitHub

## [Today's Learning Objectives]{.purple}

After today's session you will be able to:

. . .

- Write conditional statements
- Manage missing data in objects with conditionals
- Explain the difference(s) between Git and GitHub
- Define fundamental version control vocabulary

## [Muddiest Point Review]{.gold}

- Recurring topics from most recent MPs

\

. . .

- What other topic(s) would you like to review?

## [Conditionals]{.orange} {.smaller}

- You can write code that runs _only_ if an 'if statement' is true
    - Otherwise that chunk of code is skipped!

\

. . .

- This allows you to write flexible code that can handle any outcome that you can anticipate!
    - Particularly useful for subsetting data based on the contents of a column

\

. . .

- These 'if statements' are called [conditionals]{.purple}

\

. . .

- The answer to a conditional <u>_must_</u> be either `TRUE` or `FALSE`

## [Fundamentals: EQUAL]{.orange} {.smaller}

- Are two things exactly equal?

\

. . .

```{r conditional-equal}
#| echo: true

# Check a conditional
"hello" == "hello"
```

\

. . .

- Uses `==` operator
    - Just two equal signs

## [Fundamentals: OR]{.orange} {.smaller}

- Are _any_ of these conditions met?

\

. . .

```{r conditional-or}
#| echo: true

# Check either one conditional *or* the other
"hello" == "hello" | 2 == 7
```

\

. . .

- Uses `|` operator
    - Shift + `\` on keyboard


## [Fundamentals: AND]{.orange} {.smaller}

- Are _all_ of the conditions met?

\

. . .

```{r conditional-and}
#| echo: true

# Are *all* conditions TRUE?
"hello" == "hello" & 2 == 7
```

\

. . .

- Uses `&` operator
    - Shift + 7 on keyboard

## [Fundamentals: Summary]{.orange} {.smaller}

::::{.columns}
:::{.column width="33.33%"}
### EQUAL

- Are two things exactly equal?

\

```{r conditional-ex1}
#| echo: true

"hello" == "hello"
```

\

- Uses `==` operator
    - Just two equal signs

:::
:::{.column width="33.33%"}

### OR

- Are _any_ of these conditions met?

\

```{r conditional-ex2}
#| echo: true

"hello" == "hello" | 2 == 7
```

\

- Uses `|` operator
    - Shift + `\` on keyboard

:::
:::{.column width="33.33%"}

### AND

- Are _all_ of the conditions met?

\

```{r conditional-ex3}
#| echo: true

"hello" == "hello" & 2 == 7
```

\

- Uses `&` operator
    - Shift + 7 on keyboard

:::
::::

## [Practice: Fundamental Conditionals]{.pink} {.smaller}

1. Write a conditional that tests whether "apple" is equal to "orange"

\

. . .

2. Write a conditional that uses the `&` operator and returns `TRUE`

\

. . .

3. Write a conditional that uses the `|` operator and returns `FALSE`

## [Conditionals & Vectors]{.orange} {.smaller}


- We can also use conditionals on vectors

\

. . . 

- When we do this, we get one `TRUE` or `FALSE` _per element in the vector_

\

. . . 

- Let's explore that with a demonstration:

```{r conditional-vec}
#| echo: true

# Make a vector
my_vec <- c(1, 2, 1, 1, 3, 0, 2)

# Find all elements that are equal to 1
my_vec == 1
```

## [Conditionals & Subsetting]{.orange} {.smaller}

![](images/hex-penguins.png){.absolute top=0 left=1100 width="12%" fig-alt="palmerpenguins R package hex logo"}

- Often we want to use conditional statements to "[subset]{.purple}" data 
    - I.e., keep only rows that meet the condition

\

. . . 

- Subsetting is supported because columns and rows in data are vectors

\

. . . 

- Let's look at the first column in an example dataset from the `palmerpenguins` package

```{r subset-prep}
#| echo: true

# Check out a condiitonal on one column in the dataset
palmerpenguins::penguins[1] == "Adelie"
```

## [Subsetting Cont.]{.orange} {.smaller}

![](images/hex-penguins.png){.absolute top=0 left=1100 width="12%" fig-alt="palmerpenguins R package hex logo"}

- We can use the base R `subset` function to [keep only the _rows_ of data where a specified _column_ meets a condition]{.purple}

\

. . . 

- Let's subset the penguin dataset we explored earlier

```{r subset-p1}
#| echo: true

# Load needed library
library(palmerpenguins)

# Check row number of penguins data
nrow(penguins)
```

\

. . .

```{r subset-p2}
#| echo: true

# Subset it to only 2008
peng_sub <- subset(x = penguins, year == 2008)

# Check row number again
nrow(peng_sub)
```

## [Practice: Subsetting]{.pink} {.smaller}

![](images/hex-penguins.png){.absolute top=0 left=1100 width="12%" fig-alt="palmerpenguins R package hex logo"}

- We'll use the base R `subset` function with the `peng_df` object
    - If needed, consult the help file for more details (`?subset`)

\

. . .

- Subset `peng_df` to only Adelie penguins (and assign to a `sub_v1` object)
    - I.e., `species == "Adelie"`

\

. . .

- How many rows does that subset have?

## [More Practice: Fundamental Conditionals]{.pink} {.smaller}

![](images/hex-penguins.png){.absolute top=0 left=1100 width="12%" fig-alt="palmerpenguins R package hex logo"}

- Subset `peng_df` to Adelie _or_ Gentoo penguins
    - Assign this subset to `sub_v2` object

\

. . .

- Subset `peng_df` to only male Gentoo penguins
    - Assign to `sub_v3` object

\

. . .

- How many rows does _that_ subset have?

## [Discussion: Conditionals]{.gold} {.smaller}

- We've covered EQUAL, OR, and AND
    - `==`, `|`, or `&`

\

. . .

- What unanswered questions do you have?

\

. . .

- What other types of conditional statements would be useful?
    - Think about it in the context of wanting to subset some data

## [Numeric Conditionals]{.orange} {.smaller}

- For numbers, we can use greater/less than conditionals!

\

. . .

- Greater / less than are expressed as normal
    - `>` and `<`

\

. . .

- Adding 'or equal to' is done by adding an equal sign
    - `>=` and `<=`

## [Practice: Numeric Conditionals]{.pink} {.smaller}

![](images/hex-penguins.png){.absolute top=0 left=1100 width="12%" fig-alt="palmerpenguins R package hex logo"}

- Subset `peng_df` to only penguins with a bill length greater than 40 mm
    - Assign to `sub_v7`

\

. . . 

- Subset `peng_df` to only penguins with a body mass less than or equal to 4,000 g
    - Assign to `sub_v8`

## [Temperature Check]{.purple}

#### How are you Feeling?

<p align="center">
<img src="comics/debugging.png" alt="Comic-style graph depicting someone's emotional state as they debug code (from initial struggle and defeat to eventual triumph)">
</p>

## [Version Control Background]{.orange} {.smaller}

- "[Version control]{.purple}" is a set of tools for tracking changes to a code file

\

. . .

- Version control lets you work only in a single file but still preserves the history
    - No comments you'd have to resolve (like MS Word / etc.)
    - No need to "Save As" and retain many different files for each draft

## [Version Control Rationale]{.orange} {.smaller}

Why use version control?

\

::::{.columns}
:::{.column width="33.33%"}

##### Collaboration `r fontawesome::fa(name = "handshake", a11y = "sem")`

\

Easily share & work together on files

:::
:::{.column width="33.33%"}

##### Reproducibility `r fontawesome::fa(name = "arrows-left-right", a11y = "sem")`

\

Fully document your progress and end results

:::
:::{.column width="33.33%"}

##### Portfolio `r fontawesome::fa(name = "book", a11y = "sem")`

\

Demonstrate your skills to others with coding know-how

:::
::::

## [Git Versus GitHub]{.orange} {.smaller}

![](images/logo-git.png){.absolute left=-120 top=60 width="9%" fig-alt="Git logo"}
![](images/logo-github.png){.absolute left=1000 top=20 width="15%" fig-alt="GitHub logo"}

::::{.columns}
:::{.column width="50%"}
### Git

:::
:::{.column width="50%"}
### GitHub

:::
::::

## [Git Versus GitHub]{.orange} {.smaller}

![](images/logo-git.png){.absolute left=-120 top=60 width="9%" fig-alt="Git logo"}
![](images/logo-github.png){.absolute left=1000 top=20 width="15%" fig-alt="GitHub logo"}

::::{.columns}
:::{.column width="50%"}
### Git

- Actual version control software

\

- Does the tracking of changes

\

- Works locally on your computer

\

- Not something others can interact with

:::
:::{.column width="50%"}
### GitHub

:::
::::

## [Git Versus GitHub]{.orange} {.smaller}

![](images/logo-git.png){.absolute left=-120 top=60 width="9%" fig-alt="Git logo"}
![](images/logo-github.png){.absolute left=1000 top=20 width="15%" fig-alt="GitHub logo"}

::::{.columns}
:::{.column width="50%"}
### Git

- Actual version control software

\

- Does the tracking of changes

\

- Works locally on your computer

\

- Not something others can interact with

:::
:::{.column width="50%"}

### GitHub
- <u>G</u>raphical <u>u</u>ser <u>i</u>nterface (GUI) for Git

\

- Allows _viewing_ of Git-tracked changes
    - Not actually doing version control itself

\

- Other users can see your content
    - Depending on your settings

:::
::::

## [Create a Github Profile]{.gold}

- On your computer, go to [github.com](https://github.com/)

\

- Create a profile

\

- Let me know if you run into any issues!

## [Navigating GitHub]{.orange} {.smaller}

- We'll work through part of an established GitHub workshop for this section

\

- [nceas.github.io/scicomp-workshop-collaborative-coding/github](https://nceas.github.io/scicomp-workshop-collaborative-coding/github.html)

## [Practice: Create a Repository]{.pink} {.smaller}

- To practice what we've just covered, make a practice repository!

\

. . .

- This is a test repository so:
    - Set it to "Private"
    - Create the repo with both a README and a .gitignore

\

. . .

- As you go through this process, take notes for 'future you'
    - This course will require you to make two more repositories 
    - So you'll want to have a good resource to remind yourself with down the line

## [Temperature Check]{.purple}

#### How are you Feeling?

<p align="center">
<img src="comics/debugging.png" alt="Comic-style graph depicting someone's emotional state as they debug code (from initial struggle and defeat to eventual triumph)">
</p>

## [Upcoming Due Dates]{.blue} {.smaller}

::::{.columns}

:::{.column width="50%"}

### Due before lecture

#### (By midnight)

- Homework \#2
- Read the British Ecological Society's [Reproducible Code Guide](https://www.britishecologicalsociety.org/wp-content/uploads/2017/12/guide-to-reproducible-code.pdf) (p.20-25)


:::
:::{.column width="50%"}

### Due before lab

#### (By midnight)

- Muddiest Point \#3

:::
::::

# [Bonus Git Info]{.orange}

## [Git & RStudio]{.orange} {.smaller}

- If desired, you can get GitHub to talk directly with RStudio
    - Done through Git!

\

. . . 

- Advantage is a clearer connection between your RStudio work and GitHub

## [Prep Steps]{.orange} {.smaller}

1. Install R & RStudio

\

. . . 

2. Create a GitHub Account

\

. . . 

3. Install Git
    - See [instructions here](https://happygitwithr.com/install-git.html)

\

. . . 

4. Connect RStudio and GitHub
    - See [instructions here](https://nceas.github.io/scicomp-workshop-collaborative-coding/#connect-git-and-github)


## [Git and RStudio]{.orange} {.smaller}

- You can work through part of an established GitHub workshop for this section

\

- [nceas.github.io/scicomp-workshop-collaborative-coding/rstudio](https://nceas.github.io/scicomp-workshop-collaborative-coding/rstudio.html)

# [Bonus Conditionals]{.orange}

## [OR with >2 Options]{.orange} {.smaller}

- OR conditionals with many options get cumbersome quickly
    - E.g., `x == 1 | x == 2 | x == 3 | x == 4 …`

\

. . .

-  We can use concatenation and the `%in%` operator to simplify this!

\

. . .

- `%in%` is effectively "if any of \<this vector\> matches the value"
    - E.g., `x %in% c(1, 2, 3, 4, …)`

## [Conditionals: NOT]{.orange} {.smaller}

- You can also _exclude_ based on conditions
    - Two different ways of doing this

\

. . . 

- For one / a few options: use `!=` for "not equal to"
    - E.g., `x != 10`

\

. . . 

- Can be combined with `%in%` to exclude a set of options
    - E.g., `!x %in% c(...)`
    - Note the exclamation mark is _before_ the object

## [Practice: Advanced Conditionals]{.pink} {.smaller}

![](images/hex-penguins.png){.absolute top=0 left=1100 width="12%" fig-alt="palmerpenguins R package hex logo"}

- Subset `peng_df` is species is any of "Adelie", "Gentoo", or "Chinstrap"
    - Use the `%in%` operator

\

. . .

- Subset `peng_df` to all islands except "Dream"
