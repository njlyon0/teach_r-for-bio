---
title: "Intro to Data Science"
author: "Lecture 8 -- Custom Functions"
engine: knitr
format: 
  revealjs: 
    slide-number: c
    scrollable: false
    code-overflow: wrap
    code-line-numbers: false
    code-copy: hover
    theme: [night, slides.scss]
    reference-location: document
    footer: "[Programming in R for Biologists](https://njlyon0.github.io/teach_r-for-biologists/)"
---

## A Guide to Your Process

### [Scheduling]{.blue}

### [Learning Objectives]{.purple}

### [Practice]{.pink}

### [Supporting Information]{.orange}

### [Class Discussion]{.gold}

## [Today's Plan]{.blue}

- Muddiest Point Review
- Custom Functions
- Free Work

## [Today's Learning Objectives]{.purple}

After today's session you will be able to:

. . .

- Describe the process of writing a new function
- Create a custom function to perform arithmetic

## [Muddiest Point Review]{.gold}

- Recurring topics from most recent MPs:

\

. . . 

- What other topic(s) would you like to review?

## [What is a "Custom Function"?]{.orange} {.smaller}

- We've been working with functions throughout the course
    - These functions have come from packages we can install from CRAN

\

. . .

- However, R _also_ lets you write your own functions!

\

. . .

- Functions _you_ write are called [custom functions]{.purple}

## [Why Write Functions?]{.orange} {.smaller}

- Rewriting / duplicating anything is _risky_
    - Chance for human error when you're typing
    - Typos make each "copy" potentially give different results

\

. . .

- Instead you could write/use a custom function!

\

. . .

- Functions are a "single source of truth"
    - Something went wrong? Fix the function!

\

. . .

- Can also share function scripts with friends to make their lives easier

## [Special Syntax Note]{.orange} {.smaller}

- R Uses the following special syntax for creating functions
    - You have to use the `function` function

\

. . . 

- Example syntax:
```{r ex-fxn-syntax}
#| echo: true
#| code-line-numbers: "|2|5|8|10|13"

# Define function name
multiply <- function(arg1, arg2){
  
  # Multiply the arguments together
  result <- arg1 * arg2
  
  # Return that to the user
  return(result)
  
} # End function operations

# Once created, it can be used!
multiply(arg1 = 10, arg2 = 5)
```

. . . 

- Looks kind of like a conditional or loop, right?

## [Process of Function Writing]{.purple} {.smaller}

- My tips for success in custom function writing:

. . .

1. Write a normal script that does what you want your function to do

\

. . .

2. Identify which part(s) of the script you want the function user to specify
    - These will be the arguments!

\

. . .

3. Do the special formatting to make R recognize it as a function

\

. . .

4. Use the function like you would any other!

## [Custom Function Demo]{.gold} {.smaller}

- Let's create a function together for practice!

\

. . .

- Following my tips:
    1. Write the script version of the function
    2. Figure out what the function user should have control over
    3. Make R consider it a function
    4. Use our new function!

## [Demo Step 1: Write Script]{.gold} {.smaller}

- Let's make a function that adds two numbers together
    - Artificially simple, I know, but useful to learn with!

\

. . .

- We begin by making the script version of our function

```{r ex-fxn-v1}
#| echo: true
#| code-line-numbers: true

# Add two numbers together
4 + 3
```

## [Demo Step 2: Identify Inputs]{.gold} {.smaller}

- Now we identify what the user of our function should be able to control

\

. . .

- If the function adds two numbers together, the user:
    - Should control the [first number]{.orange}
    - Should control the [second number]{.orange}
    - Should <u>not</u> control the plus sign

\

. . .

- Let's replace our numbers with objects

```{r ex-fxn-v2}
#| echo: true
#| code-line-numbers: true

# Make objects
x <- 4
y <- 3

# Add two objects together
x + y
```

## [Demo Step 3: Special Format]{.gold} {.smaller}

- We can now make this a real function!

\

. . .

- Define the function using special R syntax

```{r ex-fxn-v3}
#| echo: true
#| code-line-numbers: "|2|5|8|9"

# Define function
plus <- function(x, y){
  
  # Add arguments together
  result <- x + y
  
  # Return that
  return(result)
}
```

## [Demo Step 4: Use Function!]{.gold} {.smaller}

- Now that the function exists, we can use it just like any other function

\

. . .

- Add 4 and 3 together using our new function

```{r ex-fxn-v4}
#| echo: true
#| code-line-numbers: true

# Define function
plus(x = 4, y = 3)
```

## [Write Your Own!]{.pink} {.smaller}

- Write a function that converts pounds (lb) to kilograms (kg)
    - Formula: (pound / 2.2) = kilograms

\

- Remember my tips:
    1. Write it like a normal script
    2. Replace values a user would change with objects
    3. Use special R syntax
    4. Then use the function!

\

- Let me know when you've finished your function
    - Or if you need help!

## [Temperature Check]{.purple}

#### How are you Feeling?

<p align="center">
<img src="comics/debugging.png" alt="Comic-style graph depicting someone's emotional state as they debug code (from initial struggle and defeat to eventual triumph)">
</p>

## [Argument Defaults]{.orange} {.smaller}

- You can set argument defaults when you create a function

\

. . .

- Advantage: user doesn't have to specify all arguments

\

. . .

- How do we do this?
    - Set it in the `function` _parentheses_!

## [Default Example]{.orange} {.smaller}

- Let's define defaults in our addition function

. . .

```{r ex-fxn-v5}
#| echo: true
#| code-line-numbers: "|2|11"

# Define function
plus <- function(x = 4, y = 3){
  
  # Add arguments together
  result <- x + y
  
  # Return that
  return(result) }
```

\

. . .

- We can then use the function without specifying those arguments

```{r ex-fxn-v6}
#| echo: true
#| code-line-numbers: false

plus()
```

\

. . .

- If the user specifies an argument differently, their input "wins"

```{r ex-fxn-v7}
#| echo: true
#| code-line-numbers: false

plus(x = 10)
```

## [Make a Default]{.pink} {.smaller}

- Let's revisit your pound to kilogram function

\

. . .

- Set the default pounds to **175**

\

. . .

- What happens if you run your function with _nothing_ in the parentheses?

## [Temperature Check]{.purple}

#### How are you Feeling?

<p align="center">
<img src="comics/debugging.png" alt="Comic-style graph depicting someone's emotional state as they debug code (from initial struggle and defeat to eventual triumph)">
</p>

## [Upcoming Due Dates]{.blue} {.smaller}

### Due before 7/22

#### (By midnight)

- Final deadline for **_all_** work from a summer course
    - Homework \#8
    - GitHub Presence evaluation
    - _Optional_ [3^rd^ draft]{.pink} of Function Tutorials

## [Free Work]{.gold} {.smaller}


- Everything is due at the end of course (_soon!_)

\

Tips for success:

. . .

1. Check out rubrics and make sure you don't miss any "easy" points

. . .

2. Don't leave after this slide!

. . .

3. If you have questions, **ask them _now_** during this free work time
