---
title: "Intro to Data Science"
author: "Lecture 3 -- R Markdowns & Data Wrangling (P1)"
engine: knitr
format: 
  revealjs: 
    slide-number: c
    scrollable: false
    code-overflow: wrap
    code-line-numbers: false
    code-copy: hover
    theme: [night, slides.scss]
    reference-location: document
    footer: "[Programming in R for Biologists](https://njlyon0.github.io/teach_r-for-biologists/)"
---

## A Guide to Your Process

### [Scheduling]{.blue}

### [Learning Objectives]{.purple}

### [Practice]{.pink}

### [Supporting Information]{.orange}

### [Class Discussion]{.gold}

## [Today's Plan]{.blue}

- R Markdown Files
- Loading Data
- Working with Data
- Tidyverse - `dplyr`

## [Today's Learning Objectives]{.purple}

After today's session you will be able to:

. . .

- Define the three major components of RMarkdown files (.Rmd)
- Write code to load external data into R
- Explore data with base R tools
- Manipulate data with `dplyr`

## [GitHub Individual Work]{.gold} {.smaller}

- Great work last week!

\

- In the next week or two (i.e., before the second half of the course) I would like you to:
    - Make _another_ practice repository (or maybe 2!)

\

- What questions do you have about this?
    - Does this feel reasonable to you?

## [RMarkdown Files Intro]{.orange} {.smaller}

RMarkdown (Rmd) files have three sections:

. . . 

1. Metadata (YAML)
    - Controls formatting of document

\

. . . 

2. Plain Text
    - Technically written in [markdown syntax]{.purple}

\

. . . 

3. Code "Chunks"
    - Essentially mini R scripts within the larger file!

## [RMarkdown Analogy]{.orange}

![](images/logo-r.png){.absolute top=110 left=160 width="15%"}

![](images/chocolate.png){.absolute top=300 left=-10 width="50%"}

![](images/hex-rmarkdown.png){.absolute top=105 left=720 width="11%"}

![](images/cookie.png){.absolute top=250 left=625 width="30%"}

## [Rmds Part 1: Metadata]{.orange} {.smaller}

- Document formatting metadata is called YAML
    - <u>Y</u>et <u>A</u>nother <u>M</u>arkup <u>L</u>anguage

\

. . .

- Defines document header information & formatting
    - Title, Author, Date
    - File output type

\

. . .


- Output options:
    - HTML = like a webpage but outputs as a file rather than a living website
    - PDF

## [Rmds Part 2: Plain Text]{.orange} 

- Write text just like you would in MS Word / etc.

\

. . .

- _But_, there is no toolbar with buttons for doing formatting

\

. . . 

- Instead [Markdown syntax]{.purple} is required to accomplish these tweaks

## [Markdown Syntax]{.orange} {.smaller}

- Your function tutorials have four **required** markdown styles:

\

. . .

1. \# = headings (_more_ \# = _smaller_ heading)
2. \_text\_ = italics
3. \*\*text\*\* = bold
4. \[text\]\(link\) = hyperlinked text

\

Other format options here: [markdownguide.org/basic-syntax](https://markdownguide.offshoot.io/basic-syntax/)

## [Rmds Part 3: Code Chunks]{.orange} {.smaller}

Let's look at the structure of an example code chunk

:::{.r-stack}

![](images/code-chunk.png){.fragment .fade-out}

![](images/code-chunk-annotated.png){.fragment}

:::

\

. . .

Note that chunk definition must be formatted like:

    - ```{language chunk_name, option_1, option_2, ...}

## [Code Chunks Options]{.orange}

Let's check out three crucial code chunk options!

. . . 

<p align="center">
<img src="images/code-chunk-options.png" width="120%">
</p>

. . .

- For a full list of options see [here](www.rstudio.com/wp-content/uploads/2015/03/rmarkdown-reference.pdf)

## [Practice: RMarkdown Files]{.pink} {.smaller}

![](images/hex-rmarkdown.png){.absolute top=0 left=1100 width="12%"}

- Install the `rmarkdown` package
    - Remember to use the `install.packages` function

\

. . .

2. Create a new RMarkdown file!
    - File `r fontawesome::fa("arrow-right", a11y = "sem")` New File `r fontawesome::fa("arrow-right", a11y = "sem")` R Markdown...
    - In resulting pop-up, skip to bottom and click "OK"

\

. . .

3. Look at (1) YAML, (2) Plain text, and (3) code chunks

    - Take notes on anything that jumps out at you

\

. . .

4. Click the "knit" button

## [Temperature Check]{.purple}

#### How are you Feeling?

<p align="center">
<img src="comics/debugging.png" alt="Comic-style graph depicting someone's emotional state as they debug code (from initial struggle and defeat to eventual triumph)">
</p>

## [Loading Data]{.orange}

- Function to use depends on file type
    - CSV = `read.csv`
    - MS Excel = `readxl::read_excel`

\

. . .

- Need to assign to an object to use the data!

```{.r}
my_data <- read.csv(file = "my_data_file.csv")
```

## [Download Example Data]{.gold}

1. From the course page, download "minnow.csv"

\

2. Move "minnow.csv" from your "Downloads" folder to your RStudio Project folder

\

3. Make a new script for today's lecture

## [Practice: Load Data]{.pink}

![](images/hex-dplyr.png){.absolute top=0 left=1100 width="12%"}

- Now, use `read.csv` to read "minnow.csv" into R
    - Remember to assign it to an object!

\

. . . 

- First thing after reading in data: _<u>check structure</u>!_
    - Can use `str` or `dplyr::glimpse`

\

- What do you see?

## [Exploring Data with Base R]{.orange}

Two ways in base R to access data:

\

. . . 

1. Bracket notation (works similar to vectors)

\

. . . 

2. Dollar sign ($) notation

## [Bracket Notation]{.orange} {.smaller}

- The syntax is: `data[row number, column number]`

\

. . . 

- Let's look at some example cases

```{.r}
# Get first column
my_df[,1]

# Get first row
my_df[1,]

# Get the value in the tenth row and fourth column
my_df[10, 4]
```

\

. . . 

- Note that concatenation works here too!
    - e.g., `my_df[c(1, 2, 3), 1]`

## [Dollar Sign Notations]{.orange}

- The syntax is: `data$column`

\

. . . 

- Let's look at an example

```{.r}
# Get the column titled "species"
my_df$species
```

\

. . . 

- Note that this **does not** work for rows!

## [Practice: Base R Data Exploration]{.pink} {.smaller}

1. Using bracket notation:
    - Access the 7th row of the minnow data
    - Access the 5th column of the minnow data
    - What is the value in the 21st row and 3rd column?

\

. . . 

2. Using dollar sign notation:
    - Check the "diameter" column
    - Look at the "species" column

## [Tidyverse Background]{.orange} {.smaller}

- Ecosystem of inter-related packages & functions
    - Very human-readable
    - Extremely popular & commonly-used

![](images/hex-tidyverse.png){.absolute top=225 left=381 width="25%"}
![](images/hex-dplyr.png){.absolute top=500 left=0 width="12%"}

![](images/hex-ggplot2.png){.absolute top=500 left=150 width="12%"}

![](images/hex-tidyr.png){.absolute top=500 left=300 width="12%"}

![](images/hex-purrr.png){.absolute top=500 left=450 width="12%"}

![](images/hex-readr.png){.absolute top=500 left=600 width="12%"}

![](images/hex-tibble.png){.absolute top=500 left=750 width="12%"}

![](images/hex-magrittr.png){.absolute top=500 left=900 width="12%"}

## [`dplyr` Part 1: `filter`]{.orange} {.smaller}

- Subset using conditionals with `filter`
    - `dplyr::filter` == `subset`

\

```{.r}
# Subset to only butterfly milkweed records
milkweed <- dplyr::filter(.data = flowers, species == "Asclepias tuberosa")
```

\

. . .

- Can use `filter` instead of `subset` just to live fully in the Tidyverse
    - Ultimately a style choice so your call!

\

- Remember our discussion of [conditionals]{.blue} last week? 
    - Types include: `==`, `|`, `&`, `%in%`, `!=`

## [`dplyr` Part 2: `mutate`]{.orange} {.smaller}

- Make new columns with `mutate`

\

- Can create multiple columns at the same time
```{.r}
mutate(.data = my_df, new1 = ...,
                      new2 = ...,
                      new3 = new1 / new2)
```

\

. . .

- Has optional `.after` argument to specify where you want the new column
```{.r}
my_df2, <- mutate(.data = my_df, weight_lb = weight_kg * 2.2,
                  .after = weight_kg)
```

## [Column Naming Aside]{.orange} {.smaller} 

- Avoid spaces or hyphens (`-`) in column names
    - Programming languages don't like these characters in column names

. . .

<p align="center">
<img src="comics/case-options.jpg" alt="Comic depicting multiple case options used in coding as the things they're named after" width="70%">
</p>

## [`dplyr` Part 3: `select`]{.orange} {.smaller}

- Pick columns to keep or remove with `select`

\

. . .

- Can choose columns to _keep_ or to _remove_
```{.r}
# Keep only species information and count columns
select(.data = my_df, species, count)

# Remove the weight column
select(.data = my_df, -weight_kg)
```

\

. . .

- Notice that column names are **not** in quotes
    - This is one of the special properties of the Tidyverse

## [Practice: Wrangling with `dplyr`]{.pink} {.smaller}

![](images/hex-dplyr.png){.absolute top=0 left=1100 width="12%"}

1. Filter the minnow data to only cases where the species is Stoneroller or Chub
    - There are (at least) three ways of doing this; can you identify them all?

. . .

2. For that subset, make new columns where river depth and fish nest diameter are in meters

. . .

3. Next, keep only the transect, species, diameter in meters, and depth in meters columns
    - There are two ways of doing this; can you identify them both?

\

. . .

4. Check your work! What are the dimensions of the final data object?

. . . 

- Should be 14 rows and 4 columns

## [Temperature Check]{.purple}

#### How are you Feeling?

<p align="center">
<img src="comics/debugging.png" alt="Comic-style graph depicting someone's emotional state as they debug code (from initial struggle and defeat to eventual triumph)">
</p>

## [Upcoming Due Dates]{.blue} {.smaller}

::::{.columns}

:::{.column width="50%"}

### Due before lab

#### (By midnight)

- Muddiest Point \#3

:::

:::{.column width="50%"}

### Due before lecture

#### (By midnight)

- Homework \#3
- Pick 7-10 possible functions for Function Tutorial assignment
    - Visit: [cran.r-project.org](https://cran.r-project.org/)
    - Click "Packages" in left sidebar
    - Click "Table of available packages, sorted by name"
    - Your possible functions must be from these packages!

:::

::::

